{"ast":null,"code":"import { sha512 } from \"@noble/hashes/sha512\";\nimport { hmac } from \"@noble/hashes/hmac\";\nimport nacl from \"tweetnacl\";\nimport { fromHEX } from \"@mysten/bcs\";\nconst ED25519_CURVE = \"ed25519 seed\";\nconst HARDENED_OFFSET = 2147483648;\nconst pathRegex = new RegExp(\"^m(\\\\/[0-9]+')+$\");\nconst replaceDerive = val => val.replace(\"'\", \"\");\nconst getMasterKeyFromSeed = seed => {\n  const h = hmac.create(sha512, ED25519_CURVE);\n  const I = h.update(fromHEX(seed)).digest();\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return {\n    key: IL,\n    chainCode: IR\n  };\n};\nconst CKDPriv = (_ref, index) => {\n  let {\n    key,\n    chainCode\n  } = _ref;\n  const indexBuffer = new ArrayBuffer(4);\n  const cv = new DataView(indexBuffer);\n  cv.setUint32(0, index);\n  const data = new Uint8Array(1 + key.length + indexBuffer.byteLength);\n  data.set(new Uint8Array(1).fill(0));\n  data.set(key, 1);\n  data.set(new Uint8Array(indexBuffer, 0, indexBuffer.byteLength), key.length + 1);\n  const I = hmac.create(sha512, chainCode).update(data).digest();\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return {\n    key: IL,\n    chainCode: IR\n  };\n};\nconst getPublicKey = function (privateKey) {\n  let withZeroByte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const keyPair = nacl.sign.keyPair.fromSeed(privateKey);\n  const signPk = keyPair.secretKey.subarray(32);\n  const newArr = new Uint8Array(signPk.length + 1);\n  newArr.set([0]);\n  newArr.set(signPk, 1);\n  return withZeroByte ? newArr : signPk;\n};\nconst isValidPath = path => {\n  if (!pathRegex.test(path)) {\n    return false;\n  }\n  return !path.split(\"/\").slice(1).map(replaceDerive).some(isNaN\n  /* ts T_T*/);\n};\n\nconst derivePath = function (path, seed) {\n  let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HARDENED_OFFSET;\n  if (!isValidPath(path)) {\n    throw new Error(\"Invalid derivation path\");\n  }\n  const {\n    key,\n    chainCode\n  } = getMasterKeyFromSeed(seed);\n  const segments = path.split(\"/\").slice(1).map(replaceDerive).map(el => parseInt(el, 10));\n  return segments.reduce((parentKeys, segment) => CKDPriv(parentKeys, segment + offset), {\n    key,\n    chainCode\n  });\n};\nexport { derivePath, getMasterKeyFromSeed, getPublicKey, isValidPath, pathRegex, replaceDerive };","map":{"version":3,"names":["sha512","hmac","nacl","fromHEX","ED25519_CURVE","HARDENED_OFFSET","pathRegex","RegExp","replaceDerive","val","replace","getMasterKeyFromSeed","seed","h","create","I","update","digest","IL","slice","IR","key","chainCode","CKDPriv","_ref","index","indexBuffer","ArrayBuffer","cv","DataView","setUint32","data","Uint8Array","length","byteLength","set","fill","getPublicKey","privateKey","withZeroByte","arguments","undefined","keyPair","sign","fromSeed","signPk","secretKey","subarray","newArr","isValidPath","path","test","split","map","some","isNaN","derivePath","offset","Error","segments","el","parseInt","reduce","parentKeys","segment"],"sources":["/Users/admin/Downloads/tree-web-three1/tree-web-three-react/node_modules/@mysten/sui.js/src/utils/ed25519-hd-key.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// This is adapted from https://github.com/alepop/ed25519-hd-key replacing create-hmac\n// with @noble/hashes to be browser compatible.\n\nimport { sha512 } from '@noble/hashes/sha512';\nimport { hmac } from '@noble/hashes/hmac';\nimport nacl from 'tweetnacl';\nimport { fromHEX } from '@mysten/bcs';\n\ntype Hex = string;\ntype Path = string;\n\ntype Keys = {\n\tkey: Uint8Array;\n\tchainCode: Uint8Array;\n};\n\nconst ED25519_CURVE = 'ed25519 seed';\nconst HARDENED_OFFSET = 0x80000000;\n\nexport const pathRegex = new RegExp(\"^m(\\\\/[0-9]+')+$\");\n\nexport const replaceDerive = (val: string): string => val.replace(\"'\", '');\n\nexport const getMasterKeyFromSeed = (seed: Hex): Keys => {\n\tconst h = hmac.create(sha512, ED25519_CURVE);\n\tconst I = h.update(fromHEX(seed)).digest();\n\tconst IL = I.slice(0, 32);\n\tconst IR = I.slice(32);\n\treturn {\n\t\tkey: IL,\n\t\tchainCode: IR,\n\t};\n};\n\nconst CKDPriv = ({ key, chainCode }: Keys, index: number): Keys => {\n\tconst indexBuffer = new ArrayBuffer(4);\n\tconst cv = new DataView(indexBuffer);\n\tcv.setUint32(0, index);\n\n\tconst data = new Uint8Array(1 + key.length + indexBuffer.byteLength);\n\tdata.set(new Uint8Array(1).fill(0));\n\tdata.set(key, 1);\n\tdata.set(new Uint8Array(indexBuffer, 0, indexBuffer.byteLength), key.length + 1);\n\n\tconst I = hmac.create(sha512, chainCode).update(data).digest();\n\tconst IL = I.slice(0, 32);\n\tconst IR = I.slice(32);\n\treturn {\n\t\tkey: IL,\n\t\tchainCode: IR,\n\t};\n};\n\nexport const getPublicKey = (privateKey: Uint8Array, withZeroByte = true): Uint8Array => {\n\tconst keyPair = nacl.sign.keyPair.fromSeed(privateKey);\n\tconst signPk = keyPair.secretKey.subarray(32);\n\tconst newArr = new Uint8Array(signPk.length + 1);\n\tnewArr.set([0]);\n\tnewArr.set(signPk, 1);\n\treturn withZeroByte ? newArr : signPk;\n};\n\nexport const isValidPath = (path: string): boolean => {\n\tif (!pathRegex.test(path)) {\n\t\treturn false;\n\t}\n\treturn !path\n\t\t.split('/')\n\t\t.slice(1)\n\t\t.map(replaceDerive)\n\t\t.some(isNaN as any /* ts T_T*/);\n};\n\nexport const derivePath = (path: Path, seed: Hex, offset = HARDENED_OFFSET): Keys => {\n\tif (!isValidPath(path)) {\n\t\tthrow new Error('Invalid derivation path');\n\t}\n\n\tconst { key, chainCode } = getMasterKeyFromSeed(seed);\n\tconst segments = path\n\t\t.split('/')\n\t\t.slice(1)\n\t\t.map(replaceDerive)\n\t\t.map((el) => parseInt(el, 10));\n\n\treturn segments.reduce((parentKeys, segment) => CKDPriv(parentKeys, segment + offset), {\n\t\tkey,\n\t\tchainCode,\n\t});\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}