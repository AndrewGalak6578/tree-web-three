{"ast":null,"code":"/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { createCurve } from './_shortw_utils.js';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { Field } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport { createHasher } from './abstract/hash-to-curve.js';\n// NIST secp256r1 aka p256\n// https://www.secg.org/sec2-v2.pdf, https://neuromancer.sk/std/nist/P-256\nconst Fp = Field(BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'));\nconst CURVE_A = Fp.create(BigInt('-3'));\nconst CURVE_B = BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b');\n// prettier-ignore\nexport const p256 = createCurve({\n  a: CURVE_A,\n  b: CURVE_B,\n  Fp,\n  // Curve order, total count of valid points in the field\n  n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n  // Base (generator) point (x, y)\n  Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n  Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n  h: BigInt(1),\n  lowS: false\n}, sha256);\nexport const secp256r1 = p256;\nconst mapSWU = /* @__PURE__ */(() => mapToCurveSimpleSWU(Fp, {\n  A: CURVE_A,\n  B: CURVE_B,\n  Z: Fp.create(BigInt('-10'))\n}))();\nconst htf = /* @__PURE__ */(() => createHasher(secp256r1.ProjectivePoint, scalars => mapSWU(scalars[0]), {\n  DST: 'P256_XMD:SHA-256_SSWU_RO_',\n  encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\n  p: Fp.ORDER,\n  m: 1,\n  k: 128,\n  expand: 'xmd',\n  hash: sha256\n}))();\nexport const hashToCurve = /* @__PURE__ */(() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */(() => htf.encodeToCurve)();","map":{"version":3,"names":["createCurve","sha256","Field","mapToCurveSimpleSWU","createHasher","Fp","BigInt","CURVE_A","create","CURVE_B","p256","a","b","n","Gx","Gy","h","lowS","secp256r1","mapSWU","A","B","Z","htf","ProjectivePoint","scalars","DST","encodeDST","p","ORDER","m","k","expand","hash","hashToCurve","encodeToCurve"],"sources":["/Users/admin/Downloads/tree-web-three1/tree-web-three-react/node_modules/@noble/curves/src/p256.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { createCurve } from './_shortw_utils.js';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { Field } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport { createHasher } from './abstract/hash-to-curve.js';\n\n// NIST secp256r1 aka p256\n// https://www.secg.org/sec2-v2.pdf, https://neuromancer.sk/std/nist/P-256\n\nconst Fp = Field(BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'));\nconst CURVE_A = Fp.create(BigInt('-3'));\nconst CURVE_B = BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b');\n\n// prettier-ignore\nexport const p256 = createCurve({\n  a: CURVE_A, // Equation params: a, b\n  b: CURVE_B,\n  Fp, // Field: 2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n-1n\n  // Curve order, total count of valid points in the field\n  n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n  // Base (generator) point (x, y)\n  Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n  Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n  h: BigInt(1),\n  lowS: false,\n} as const, sha256);\nexport const secp256r1 = p256;\n\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: CURVE_A,\n    B: CURVE_B,\n    Z: Fp.create(BigInt('-10')),\n  }))();\n\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(secp256r1.ProjectivePoint, (scalars: bigint[]) => mapSWU(scalars[0]), {\n    DST: 'P256_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n  }))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,oBAAoB;AAChD,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,SAASC,KAAK,QAAQ,uBAAuB;AAC7C,SAASC,mBAAmB,QAAQ,2BAA2B;AAC/D,SAASC,YAAY,QAAQ,6BAA6B;AAE1D;AACA;AAEA,MAAMC,EAAE,GAAGH,KAAK,CAACI,MAAM,CAAC,oEAAoE,CAAC,CAAC;AAC9F,MAAMC,OAAO,GAAGF,EAAE,CAACG,MAAM,CAACF,MAAM,CAAC,IAAI,CAAC,CAAC;AACvC,MAAMG,OAAO,GAAGH,MAAM,CAAC,oEAAoE,CAAC;AAE5F;AACA,OAAO,MAAMI,IAAI,GAAGV,WAAW,CAAC;EAC9BW,CAAC,EAAEJ,OAAO;EACVK,CAAC,EAAEH,OAAO;EACVJ,EAAE;EACF;EACAQ,CAAC,EAAEP,MAAM,CAAC,oEAAoE,CAAC;EAC/E;EACAQ,EAAE,EAAER,MAAM,CAAC,oEAAoE,CAAC;EAChFS,EAAE,EAAET,MAAM,CAAC,oEAAoE,CAAC;EAChFU,CAAC,EAAEV,MAAM,CAAC,CAAC,CAAC;EACZW,IAAI,EAAE;CACE,EAAEhB,MAAM,CAAC;AACnB,OAAO,MAAMiB,SAAS,GAAGR,IAAI;AAE7B,MAAMS,MAAM,GAAG,eAAgB,CAAC,MAC9BhB,mBAAmB,CAACE,EAAE,EAAE;EACtBe,CAAC,EAAEb,OAAO;EACVc,CAAC,EAAEZ,OAAO;EACVa,CAAC,EAAEjB,EAAE,CAACG,MAAM,CAACF,MAAM,CAAC,KAAK,CAAC;CAC3B,CAAC,EAAC,CAAE;AAEP,MAAMiB,GAAG,GAAG,eAAgB,CAAC,MAC3BnB,YAAY,CAACc,SAAS,CAACM,eAAe,EAAGC,OAAiB,IAAKN,MAAM,CAACM,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;EACjFC,GAAG,EAAE,2BAA2B;EAChCC,SAAS,EAAE,2BAA2B;EACtCC,CAAC,EAAEvB,EAAE,CAACwB,KAAK;EACXC,CAAC,EAAE,CAAC;EACJC,CAAC,EAAE,GAAG;EACNC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAEhC;CACP,CAAC,EAAC,CAAE;AACP,OAAO,MAAMiC,WAAW,GAAG,eAAgB,CAAC,MAAMX,GAAG,CAACW,WAAW,EAAC,CAAE;AACpE,OAAO,MAAMC,aAAa,GAAG,eAAgB,CAAC,MAAMZ,GAAG,CAACY,aAAa,EAAC,CAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}