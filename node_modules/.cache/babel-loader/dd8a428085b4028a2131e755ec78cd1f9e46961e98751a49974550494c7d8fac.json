{"ast":null,"code":"import { getObjectFields, getObjectId, getObjectType } from \"../types/objects.js\";\nimport { normalizeSuiObjectId, ObjectId } from \"../types/common.js\";\nimport { getOption } from \"../types/option.js\";\nimport { nullable, number, object, string } from \"superstruct\";\nconst SUI_SYSTEM_ADDRESS = \"0x3\";\nconst SUI_FRAMEWORK_ADDRESS = \"0x2\";\nconst MOVE_STDLIB_ADDRESS = \"0x1\";\nconst OBJECT_MODULE_NAME = \"object\";\nconst UID_STRUCT_NAME = \"UID\";\nconst ID_STRUCT_NAME = \"ID\";\nconst SUI_TYPE_ARG = `${SUI_FRAMEWORK_ADDRESS}::sui::SUI`;\nconst VALIDATORS_EVENTS_QUERY = \"0x3::validator_set::ValidatorEpochInfoEventV2\";\nconst SUI_CLOCK_OBJECT_ID = normalizeSuiObjectId(\"0x6\");\nconst PAY_MODULE_NAME = \"pay\";\nconst PAY_SPLIT_COIN_VEC_FUNC_NAME = \"split_vec\";\nconst PAY_JOIN_COIN_FUNC_NAME = \"join\";\nconst COIN_TYPE_ARG_REGEX = /^0x2::coin::Coin<(.+)>$/;\nfunction isObjectDataFull(resp) {\n  return !!resp.data || !!resp.type;\n}\nconst CoinMetadataStruct = object({\n  decimals: number(),\n  name: string(),\n  symbol: string(),\n  description: string(),\n  iconUrl: nullable(string()),\n  id: nullable(ObjectId)\n});\nclass Coin {\n  static isCoin(data) {\n    return Coin.getType(data)?.match(COIN_TYPE_ARG_REGEX) != null;\n  }\n  static getCoinType(type) {\n    const [, res] = type.match(COIN_TYPE_ARG_REGEX) ?? [];\n    return res || null;\n  }\n  static getCoinTypeArg(obj) {\n    const type = Coin.getType(obj);\n    return type ? Coin.getCoinType(type) : null;\n  }\n  static isSUI(obj) {\n    const arg = Coin.getCoinTypeArg(obj);\n    return arg ? Coin.getCoinSymbol(arg) === \"SUI\" : false;\n  }\n  static getCoinSymbol(coinTypeArg) {\n    return coinTypeArg.substring(coinTypeArg.lastIndexOf(\":\") + 1);\n  }\n  static getCoinStructTag(coinTypeArg) {\n    return {\n      address: normalizeSuiObjectId(coinTypeArg.split(\"::\")[0]),\n      module: coinTypeArg.split(\"::\")[1],\n      name: coinTypeArg.split(\"::\")[2],\n      typeParams: []\n    };\n  }\n  static getID(obj) {\n    if (\"fields\" in obj) {\n      return obj.fields.id.id;\n    }\n    return getObjectId(obj);\n  }\n  static totalBalance(coins) {\n    return coins.reduce((partialSum, c) => partialSum + Coin.getBalanceFromCoinStruct(c), BigInt(0));\n  }\n  /**\n   * Sort coin by balance in an ascending order\n   */\n  static sortByBalance(coins) {\n    return [...coins].sort((a, b) => Coin.getBalanceFromCoinStruct(a) < Coin.getBalanceFromCoinStruct(b) ? -1 : Coin.getBalanceFromCoinStruct(a) > Coin.getBalanceFromCoinStruct(b) ? 1 : 0);\n  }\n  static getBalanceFromCoinStruct(coin) {\n    return BigInt(coin.balance);\n  }\n  static getBalance(data) {\n    if (!Coin.isCoin(data)) {\n      return void 0;\n    }\n    const balance = getObjectFields(data)?.balance;\n    return BigInt(balance);\n  }\n  static getType(data) {\n    if (isObjectDataFull(data)) {\n      return getObjectType(data);\n    }\n    return data.type;\n  }\n}\nconst _Delegation = class _Delegation {\n  static isDelegationSuiObject(obj) {\n    return \"type\" in obj && obj.type === _Delegation.SUI_OBJECT_TYPE;\n  }\n  constructor(obj) {\n    this.suiObject = obj;\n  }\n  nextRewardUnclaimedEpoch() {\n    return this.suiObject.data.fields.next_reward_unclaimed_epoch;\n  }\n  activeDelegation() {\n    return BigInt(getOption(this.suiObject.data.fields.active_delegation) || 0);\n  }\n  delegateAmount() {\n    return this.suiObject.data.fields.delegate_amount;\n  }\n  endingEpoch() {\n    return getOption(this.suiObject.data.fields.ending_epoch);\n  }\n  validatorAddress() {\n    return this.suiObject.data.fields.validator_address;\n  }\n  isActive() {\n    return this.activeDelegation() > 0 && !this.endingEpoch();\n  }\n  hasUnclaimedRewards(epoch) {\n    return this.nextRewardUnclaimedEpoch() <= epoch && (this.isActive() || (this.endingEpoch() || 0) > epoch);\n  }\n};\n_Delegation.SUI_OBJECT_TYPE = \"0x2::delegation::Delegation\";\nlet Delegation = _Delegation;\nexport { COIN_TYPE_ARG_REGEX, Coin, CoinMetadataStruct, Delegation, ID_STRUCT_NAME, MOVE_STDLIB_ADDRESS, OBJECT_MODULE_NAME, PAY_JOIN_COIN_FUNC_NAME, PAY_MODULE_NAME, PAY_SPLIT_COIN_VEC_FUNC_NAME, SUI_CLOCK_OBJECT_ID, SUI_FRAMEWORK_ADDRESS, SUI_SYSTEM_ADDRESS, SUI_TYPE_ARG, UID_STRUCT_NAME, VALIDATORS_EVENTS_QUERY, isObjectDataFull };","map":{"version":3,"names":["getObjectFields","getObjectId","getObjectType","normalizeSuiObjectId","ObjectId","getOption","nullable","number","object","string","SUI_SYSTEM_ADDRESS","SUI_FRAMEWORK_ADDRESS","MOVE_STDLIB_ADDRESS","OBJECT_MODULE_NAME","UID_STRUCT_NAME","ID_STRUCT_NAME","SUI_TYPE_ARG","VALIDATORS_EVENTS_QUERY","SUI_CLOCK_OBJECT_ID","PAY_MODULE_NAME","PAY_SPLIT_COIN_VEC_FUNC_NAME","PAY_JOIN_COIN_FUNC_NAME","COIN_TYPE_ARG_REGEX","isObjectDataFull","resp","data","type","CoinMetadataStruct","decimals","name","symbol","description","iconUrl","id","Coin","isCoin","getType","match","getCoinType","res","getCoinTypeArg","obj","isSUI","arg","getCoinSymbol","coinTypeArg","substring","lastIndexOf","getCoinStructTag","address","split","module","typeParams","getID","fields","totalBalance","coins","reduce","partialSum","c","getBalanceFromCoinStruct","BigInt","sortByBalance","sort","a","b","coin","balance","getBalance","_Delegation","isDelegationSuiObject","SUI_OBJECT_TYPE","constructor","suiObject","nextRewardUnclaimedEpoch","next_reward_unclaimed_epoch","activeDelegation","active_delegation","delegateAmount","delegate_amount","endingEpoch","ending_epoch","validatorAddress","validator_address","isActive","hasUnclaimedRewards","epoch","Delegation"],"sources":["/Users/admin/Downloads/tree-web-three1/tree-web-three-react/node_modules/@mysten/sui.js/src/framework/framework.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type {\n\tSuiObjectResponse,\n\tSuiMoveObject,\n\tSuiObjectInfo,\n\tSuiObjectData,\n} from '../types/objects.js';\nimport { getObjectFields, getObjectId, getObjectType } from '../types/objects.js';\nimport type { SuiAddress } from '../types/common.js';\nimport { normalizeSuiObjectId, ObjectId } from '../types/common.js';\n\nimport type { Option } from '../types/option.js';\nimport { getOption } from '../types/option.js';\nimport type { CoinStruct } from '../types/coin.js';\nimport type { StructTag } from '../types/sui-bcs.js';\nimport type { Infer } from 'superstruct';\nimport { nullable, number, object, string } from 'superstruct';\n\nexport const SUI_SYSTEM_ADDRESS = '0x3';\nexport const SUI_FRAMEWORK_ADDRESS = '0x2';\nexport const MOVE_STDLIB_ADDRESS = '0x1';\nexport const OBJECT_MODULE_NAME = 'object';\nexport const UID_STRUCT_NAME = 'UID';\nexport const ID_STRUCT_NAME = 'ID';\nexport const SUI_TYPE_ARG = `${SUI_FRAMEWORK_ADDRESS}::sui::SUI`;\nexport const VALIDATORS_EVENTS_QUERY = '0x3::validator_set::ValidatorEpochInfoEventV2';\n\nexport const SUI_CLOCK_OBJECT_ID = normalizeSuiObjectId('0x6');\n\n// `sui::pay` module is used for Coin management (split, join, join_and_transfer etc);\nexport const PAY_MODULE_NAME = 'pay';\nexport const PAY_SPLIT_COIN_VEC_FUNC_NAME = 'split_vec';\nexport const PAY_JOIN_COIN_FUNC_NAME = 'join';\nexport const COIN_TYPE_ARG_REGEX = /^0x2::coin::Coin<(.+)>$/;\n\ntype ObjectData = ObjectDataFull | SuiObjectInfo;\ntype ObjectDataFull = SuiObjectResponse | SuiMoveObject;\n\nexport function isObjectDataFull(resp: ObjectData | ObjectDataFull): resp is SuiObjectResponse {\n\treturn !!(resp as SuiObjectResponse).data || !!(resp as SuiMoveObject).type;\n}\n\nexport const CoinMetadataStruct = object({\n\tdecimals: number(),\n\tname: string(),\n\tsymbol: string(),\n\tdescription: string(),\n\ticonUrl: nullable(string()),\n\tid: nullable(ObjectId),\n});\n\nexport type CoinMetadata = Infer<typeof CoinMetadataStruct>;\n\n/**\n * Utility class for 0x2::coin\n * as defined in https://github.com/MystenLabs/sui/blob/ca9046fd8b1a9e8634a4b74b0e7dabdc7ea54475/sui_programmability/framework/sources/Coin.move#L4\n */\nexport class Coin {\n\tstatic isCoin(data: ObjectData): boolean {\n\t\treturn Coin.getType(data)?.match(COIN_TYPE_ARG_REGEX) != null;\n\t}\n\n\tstatic getCoinType(type: string) {\n\t\tconst [, res] = type.match(COIN_TYPE_ARG_REGEX) ?? [];\n\t\treturn res || null;\n\t}\n\n\tstatic getCoinTypeArg(obj: ObjectData) {\n\t\tconst type = Coin.getType(obj);\n\t\treturn type ? Coin.getCoinType(type) : null;\n\t}\n\n\tstatic isSUI(obj: ObjectData) {\n\t\tconst arg = Coin.getCoinTypeArg(obj);\n\t\treturn arg ? Coin.getCoinSymbol(arg) === 'SUI' : false;\n\t}\n\n\tstatic getCoinSymbol(coinTypeArg: string) {\n\t\treturn coinTypeArg.substring(coinTypeArg.lastIndexOf(':') + 1);\n\t}\n\n\tstatic getCoinStructTag(coinTypeArg: string): StructTag {\n\t\treturn {\n\t\t\taddress: normalizeSuiObjectId(coinTypeArg.split('::')[0]),\n\t\t\tmodule: coinTypeArg.split('::')[1],\n\t\t\tname: coinTypeArg.split('::')[2],\n\t\t\ttypeParams: [],\n\t\t};\n\t}\n\n\tpublic static getID(obj: ObjectData): ObjectId {\n\t\tif ('fields' in obj) {\n\t\t\treturn obj.fields.id.id;\n\t\t}\n\t\treturn getObjectId(obj);\n\t}\n\n\tstatic totalBalance(coins: CoinStruct[]): bigint {\n\t\treturn coins.reduce(\n\t\t\t(partialSum, c) => partialSum + Coin.getBalanceFromCoinStruct(c),\n\t\t\tBigInt(0),\n\t\t);\n\t}\n\n\t/**\n\t * Sort coin by balance in an ascending order\n\t */\n\tstatic sortByBalance(coins: CoinStruct[]): CoinStruct[] {\n\t\treturn [...coins].sort((a, b) =>\n\t\t\tCoin.getBalanceFromCoinStruct(a) < Coin.getBalanceFromCoinStruct(b)\n\t\t\t\t? -1\n\t\t\t\t: Coin.getBalanceFromCoinStruct(a) > Coin.getBalanceFromCoinStruct(b)\n\t\t\t\t? 1\n\t\t\t\t: 0,\n\t\t);\n\t}\n\n\tstatic getBalanceFromCoinStruct(coin: CoinStruct): bigint {\n\t\treturn BigInt(coin.balance);\n\t}\n\n\tstatic getBalance(data: ObjectDataFull): bigint | undefined {\n\t\tif (!Coin.isCoin(data)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst balance = getObjectFields(data)?.balance;\n\t\treturn BigInt(balance);\n\t}\n\n\tprivate static getType(data: ObjectData): string | undefined {\n\t\tif (isObjectDataFull(data)) {\n\t\t\treturn getObjectType(data);\n\t\t}\n\t\treturn data.type;\n\t}\n}\n\nexport type DelegationData = SuiMoveObject & {\n\tdataType: 'moveObject';\n\ttype: '0x2::delegation::Delegation';\n\tfields: {\n\t\tactive_delegation: Option<number>;\n\t\tdelegate_amount: number;\n\t\tnext_reward_unclaimed_epoch: number;\n\t\tvalidator_address: SuiAddress;\n\t\tinfo: {\n\t\t\tid: string;\n\t\t\tversion: number;\n\t\t};\n\t\t// TODO (jian): clean up after 0.34\n\t\tcoin_locked_until_epoch: Option<SuiMoveObject>;\n\t\tending_epoch: Option<number>;\n\t};\n};\n\nexport type DelegationSuiObject = Omit<SuiObjectData, 'data'> & {\n\tdata: DelegationData;\n};\n\n// Class for delegation.move\n// see https://github.com/MystenLabs/fastnft/blob/161aa27fe7eb8ecf2866ec9eb192e768f25da768/crates/sui-framework/sources/governance/delegation.move\nexport class Delegation {\n\tpublic static readonly SUI_OBJECT_TYPE = '0x2::delegation::Delegation';\n\tprivate suiObject: DelegationSuiObject;\n\n\tpublic static isDelegationSuiObject(obj: SuiObjectData): obj is DelegationSuiObject {\n\t\treturn 'type' in obj && obj.type === Delegation.SUI_OBJECT_TYPE;\n\t}\n\n\tconstructor(obj: DelegationSuiObject) {\n\t\tthis.suiObject = obj;\n\t}\n\n\tpublic nextRewardUnclaimedEpoch() {\n\t\treturn this.suiObject.data.fields.next_reward_unclaimed_epoch;\n\t}\n\n\tpublic activeDelegation() {\n\t\treturn BigInt(getOption(this.suiObject.data.fields.active_delegation) || 0);\n\t}\n\n\tpublic delegateAmount() {\n\t\treturn this.suiObject.data.fields.delegate_amount;\n\t}\n\n\tpublic endingEpoch() {\n\t\treturn getOption(this.suiObject.data.fields.ending_epoch);\n\t}\n\n\tpublic validatorAddress() {\n\t\treturn this.suiObject.data.fields.validator_address;\n\t}\n\n\tpublic isActive() {\n\t\treturn this.activeDelegation() > 0 && !this.endingEpoch();\n\t}\n\n\tpublic hasUnclaimedRewards(epoch: number) {\n\t\treturn (\n\t\t\tthis.nextRewardUnclaimedEpoch() <= epoch &&\n\t\t\t(this.isActive() || (this.endingEpoch() || 0) > epoch)\n\t\t);\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}