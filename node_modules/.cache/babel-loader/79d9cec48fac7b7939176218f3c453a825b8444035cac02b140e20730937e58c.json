{"ast":null,"code":"import { RequestManager, HTTPTransport, Client } from \"@open-rpc/client-js\";\nimport \"superstruct\";\nimport { PACKAGE_VERSION, TARGETED_RPC_VERSION } from \"../version.js\";\nimport \"../utils/errors.js\";\nclass JsonRpcClient {\n  constructor(url, httpHeaders) {\n    const transport = new HTTPTransport(url, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Client-Sdk-Type\": \"typescript\",\n        \"Client-Sdk-Version\": PACKAGE_VERSION,\n        \"Client-Target-Api-Version\": TARGETED_RPC_VERSION,\n        ...httpHeaders\n      }\n    });\n    this.rpcClient = new Client(new RequestManager([transport]));\n  }\n  async requestWithType(method, args, struct) {\n    const req = {\n      method,\n      args\n    };\n    const response = await this.request(method, args);\n    if (false) {\n      const [err] = validate(response, struct);\n      if (err) {\n        throw new RPCValidationError({\n          req,\n          result: response,\n          cause: err\n        });\n      }\n    }\n    return response;\n  }\n  async request(method, params) {\n    return await this.rpcClient.request({\n      method,\n      params\n    });\n  }\n}\nexport { JsonRpcClient };","map":{"version":3,"names":["RequestManager","HTTPTransport","Client","PACKAGE_VERSION","TARGETED_RPC_VERSION","JsonRpcClient","constructor","url","httpHeaders","transport","headers","rpcClient","requestWithType","method","args","struct","req","response","request","err","validate","RPCValidationError","result","cause","params"],"sources":["/Users/admin/Downloads/tree-web-three1/tree-web-three-react/node_modules/@mysten/sui.js/src/rpc/client.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { RequestManager, HTTPTransport, Client } from '@open-rpc/client-js';\nimport type { Struct } from 'superstruct';\nimport { validate } from 'superstruct';\nimport { PACKAGE_VERSION, TARGETED_RPC_VERSION } from '../version.js';\nimport { RPCValidationError } from '../utils/errors.js';\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = { [header: string]: string };\n\nexport class JsonRpcClient {\n\tprivate rpcClient: Client;\n\n\tconstructor(url: string, httpHeaders?: HttpHeaders) {\n\t\tconst transport = new HTTPTransport(url, {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Client-Sdk-Type': 'typescript',\n\t\t\t\t'Client-Sdk-Version': PACKAGE_VERSION,\n\t\t\t\t'Client-Target-Api-Version': TARGETED_RPC_VERSION,\n\t\t\t\t...httpHeaders,\n\t\t\t},\n\t\t});\n\n\t\tthis.rpcClient = new Client(new RequestManager([transport]));\n\t}\n\n\tasync requestWithType<T>(method: string, args: any[], struct: Struct<T>): Promise<T> {\n\t\tconst req = { method, args };\n\n\t\tconst response = await this.request(method, args);\n\n\t\tif (process.env.NODE_ENV === 'test') {\n\t\t\tconst [err] = validate(response, struct);\n\t\t\tif (err) {\n\t\t\t\tthrow new RPCValidationError({\n\t\t\t\t\treq,\n\t\t\t\t\tresult: response,\n\t\t\t\t\tcause: err,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn response;\n\t}\n\n\tasync request(method: string, params: any[]): Promise<any> {\n\t\treturn await this.rpcClient.request({ method, params });\n\t}\n}\n"],"mappings":"AAGA,SAASA,cAAA,EAAgBC,aAAA,EAAeC,MAAA,QAAc;AAEtD,OAAyB;AACzB,SAASC,eAAA,EAAiBC,oBAAA,QAA4B;AACtD,OAAmC;AAO5B,MAAMC,aAAA,CAAc;EAG1BC,YAAYC,GAAA,EAAaC,WAAA,EAA2B;IACnD,MAAMC,SAAA,GAAY,IAAIR,aAAA,CAAcM,GAAA,EAAK;MACxCG,OAAA,EAAS;QACR,gBAAgB;QAChB,mBAAmB;QACnB,sBAAsBP,eAAA;QACtB,6BAA6BC,oBAAA;QAC7B,GAAGI;MACJ;IACD,CAAC;IAED,KAAKG,SAAA,GAAY,IAAIT,MAAA,CAAO,IAAIF,cAAA,CAAe,CAACS,SAAS,CAAC,CAAC;EAC5D;EAEA,MAAMG,gBAAmBC,MAAA,EAAgBC,IAAA,EAAaC,MAAA,EAA+B;IACpF,MAAMC,GAAA,GAAM;MAAEH,MAAA;MAAQC;IAAK;IAE3B,MAAMG,QAAA,GAAW,MAAM,KAAKC,OAAA,CAAQL,MAAA,EAAQC,IAAI;IAEhD,IAAI,OAAiC;MACpC,MAAM,CAACK,GAAG,IAAIC,QAAA,CAASH,QAAA,EAAUF,MAAM;MACvC,IAAII,GAAA,EAAK;QACR,MAAM,IAAIE,kBAAA,CAAmB;UAC5BL,GAAA;UACAM,MAAA,EAAQL,QAAA;UACRM,KAAA,EAAOJ;QACR,CAAC;MACF;IACD;IAEA,OAAOF,QAAA;EACR;EAEA,MAAMC,QAAQL,MAAA,EAAgBW,MAAA,EAA6B;IAC1D,OAAO,MAAM,KAAKb,SAAA,CAAUO,OAAA,CAAQ;MAAEL,MAAA;MAAQW;IAAO,CAAC;EACvD;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}