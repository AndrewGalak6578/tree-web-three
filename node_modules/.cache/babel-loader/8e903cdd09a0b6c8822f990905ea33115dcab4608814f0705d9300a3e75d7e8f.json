{"ast":null,"code":"import { fromB64 } from \"@mysten/bcs\";\nimport nacl from \"tweetnacl\";\nimport { messageWithIntent } from \"./intent.js\";\nimport { secp256k1 } from \"@noble/curves/secp256k1\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { blake2b } from \"@noble/hashes/blake2b\";\nimport { toSingleSignaturePubkeyPair } from \"../cryptography/utils.js\";\nasync function verifyMessage(message, serializedSignature, scope) {\n  const signature = toSingleSignaturePubkeyPair(serializedSignature);\n  const messageBytes = messageWithIntent(scope, typeof message === \"string\" ? fromB64(message) : message);\n  const digest = blake2b(messageBytes, {\n    dkLen: 32\n  });\n  switch (signature.signatureScheme) {\n    case \"ED25519\":\n      return nacl.sign.detached.verify(digest, signature.signature, signature.pubKey.toBytes());\n    case \"Secp256k1\":\n      return secp256k1.verify(secp256k1.Signature.fromCompact(signature.signature), sha256(digest), signature.pubKey.toBytes());\n    default:\n      throw new Error(`Unknown signature scheme: \"${signature.signatureScheme}\"`);\n  }\n}\nexport { verifyMessage };","map":{"version":3,"names":["fromB64","nacl","messageWithIntent","secp256k1","sha256","blake2b","toSingleSignaturePubkeyPair","verifyMessage","message","serializedSignature","scope","signature","messageBytes","digest","dkLen","signatureScheme","sign","detached","verify","pubKey","toBytes","Signature","fromCompact","Error"],"sources":["/Users/admin/Downloads/tree-web-three1/tree-web-three-react/node_modules/@mysten/sui.js/src/utils/verify.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64 } from '@mysten/bcs';\nimport nacl from 'tweetnacl';\nimport type { IntentScope } from './intent.js';\nimport { messageWithIntent } from './intent.js';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { sha256 } from '@noble/hashes/sha256';\nimport type { SerializedSignature } from '../cryptography/signature.js';\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { toSingleSignaturePubkeyPair } from '../cryptography/utils.js';\n\n// TODO: This might actually make sense to eventually move to the `Keypair` instances themselves, as\n// it could allow the Sui.js to be tree-shaken a little better, possibly allowing keypairs that are\n// not used (and their deps) to be entirely removed from the bundle.\n\n/** Verify data that is signed with the expected scope. */\nexport async function verifyMessage(\n\tmessage: Uint8Array | string,\n\tserializedSignature: SerializedSignature,\n\tscope: IntentScope,\n) {\n\tconst signature = toSingleSignaturePubkeyPair(serializedSignature);\n\tconst messageBytes = messageWithIntent(\n\t\tscope,\n\t\ttypeof message === 'string' ? fromB64(message) : message,\n\t);\n\tconst digest = blake2b(messageBytes, { dkLen: 32 });\n\tswitch (signature.signatureScheme) {\n\t\tcase 'ED25519':\n\t\t\treturn nacl.sign.detached.verify(digest, signature.signature, signature.pubKey.toBytes());\n\t\tcase 'Secp256k1':\n\t\t\treturn secp256k1.verify(\n\t\t\t\tsecp256k1.Signature.fromCompact(signature.signature),\n\t\t\t\tsha256(digest),\n\t\t\t\tsignature.pubKey.toBytes(),\n\t\t\t);\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown signature scheme: \"${signature.signatureScheme}\"`);\n\t}\n}\n"],"mappings":"AAGA,SAASA,OAAA,QAAe;AACxB,OAAOC,IAAA,MAAU;AAEjB,SAASC,iBAAA,QAAyB;AAClC,SAASC,SAAA,QAAiB;AAC1B,SAASC,MAAA,QAAc;AAEvB,SAASC,OAAA,QAAe;AACxB,SAASC,2BAAA,QAAmC;AAO5C,eAAsBC,cACrBC,OAAA,EACAC,mBAAA,EACAC,KAAA,EACC;EACD,MAAMC,SAAA,GAAYL,2BAAA,CAA4BG,mBAAmB;EACjE,MAAMG,YAAA,GAAeV,iBAAA,CACpBQ,KAAA,EACA,OAAOF,OAAA,KAAY,WAAWR,OAAA,CAAQQ,OAAO,IAAIA,OAClD;EACA,MAAMK,MAAA,GAASR,OAAA,CAAQO,YAAA,EAAc;IAAEE,KAAA,EAAO;EAAG,CAAC;EAClD,QAAQH,SAAA,CAAUI,eAAA;IACjB,KAAK;MACJ,OAAOd,IAAA,CAAKe,IAAA,CAAKC,QAAA,CAASC,MAAA,CAAOL,MAAA,EAAQF,SAAA,CAAUA,SAAA,EAAWA,SAAA,CAAUQ,MAAA,CAAOC,OAAA,CAAQ,CAAC;IACzF,KAAK;MACJ,OAAOjB,SAAA,CAAUe,MAAA,CAChBf,SAAA,CAAUkB,SAAA,CAAUC,WAAA,CAAYX,SAAA,CAAUA,SAAS,GACnDP,MAAA,CAAOS,MAAM,GACbF,SAAA,CAAUQ,MAAA,CAAOC,OAAA,CAAQ,CAC1B;IACD;MACC,MAAM,IAAIG,KAAA,CAAM,8BAA8BZ,SAAA,CAAUI,eAAA,GAAkB;EAC5E;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}