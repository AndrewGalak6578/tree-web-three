{"ast":null,"code":"import { object, string, array, record, any, optional, boolean, nullable } from \"superstruct\";\nimport { ObjectId, SuiAddress, TransactionDigest, SequenceNumber } from \"./common.js\";\nconst EventId = object({\n  txDigest: TransactionDigest,\n  eventSeq: SequenceNumber\n});\nconst SuiEvent = object({\n  id: EventId,\n  // Move package where this event was emitted.\n  packageId: ObjectId,\n  // Move module where this event was emitted.\n  transactionModule: string(),\n  // Sender's Sui address.\n  sender: SuiAddress,\n  // Move event type.\n  type: string(),\n  // Parsed json value of the event\n  parsedJson: optional(record(string(), any())),\n  // Base 58 encoded bcs bytes of the move event\n  bcs: optional(string()),\n  timestampMs: optional(string())\n});\nconst PaginatedEvents = object({\n  data: array(SuiEvent),\n  nextCursor: nullable(EventId),\n  hasNextPage: boolean()\n});\nfunction getEventSender(event) {\n  return event.sender;\n}\nfunction getEventPackage(event) {\n  return event.packageId;\n}\nexport { EventId, PaginatedEvents, SuiEvent, getEventPackage, getEventSender };","map":{"version":3,"names":["object","string","array","record","any","optional","boolean","nullable","ObjectId","SuiAddress","TransactionDigest","SequenceNumber","EventId","txDigest","eventSeq","SuiEvent","id","packageId","transactionModule","sender","type","parsedJson","bcs","timestampMs","PaginatedEvents","data","nextCursor","hasNextPage","getEventSender","event","getEventPackage"],"sources":["/Users/admin/Downloads/tree-web-three1/tree-web-three-react/node_modules/@mysten/sui.js/src/types/events.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport { object, string, array, record, any, optional, boolean, nullable } from 'superstruct';\nimport type { SuiJsonValue } from './common.js';\nimport { ObjectId, SuiAddress, TransactionDigest, SequenceNumber } from './common.js';\n\nexport const EventId = object({\n\ttxDigest: TransactionDigest,\n\teventSeq: SequenceNumber,\n});\n\n// event types mirror those in \"sui-json-rpc-types/src/sui_event.rs\"\n\nexport const SuiEvent = object({\n\tid: EventId,\n\t// Move package where this event was emitted.\n\tpackageId: ObjectId,\n\t// Move module where this event was emitted.\n\ttransactionModule: string(),\n\t// Sender's Sui address.\n\tsender: SuiAddress,\n\t// Move event type.\n\ttype: string(),\n\t// Parsed json value of the event\n\tparsedJson: optional(record(string(), any())),\n\t// Base 58 encoded bcs bytes of the move event\n\tbcs: optional(string()),\n\ttimestampMs: optional(string()),\n});\n\nexport type SuiEvent = Infer<typeof SuiEvent>;\n\nexport type MoveEventField = {\n\tpath: string;\n\tvalue: SuiJsonValue;\n};\n\n/**\n * Sequential event ID, ie (transaction seq number, event seq number).\n * 1) Serves as a unique event ID for each fullnode\n * 2) Also serves to sequence events for the purposes of pagination and querying.\n *    A higher id is an event seen later by that fullnode.\n * This ID is the \"cursor\" for event querying.\n */\nexport type EventId = Infer<typeof EventId>;\n\n// mirrors sui_json_rpc_types::SuiEventFilter\nexport type SuiEventFilter =\n\t| { Package: ObjectId }\n\t| { MoveModule: { package: ObjectId; module: string } }\n\t| { MoveEventType: string }\n\t| { MoveEventField: MoveEventField }\n\t| { Transaction: TransactionDigest }\n\t| {\n\t\t\tTimeRange: {\n\t\t\t\t// left endpoint of time interval, milliseconds since epoch, inclusive\n\t\t\t\tstartTime: string;\n\t\t\t\t// right endpoint of time interval, milliseconds since epoch, exclusive\n\t\t\t\tendTime: string;\n\t\t\t};\n\t  }\n\t| { Sender: SuiAddress }\n\t| { All: SuiEventFilter[] }\n\t| { Any: SuiEventFilter[] }\n\t| { And: [SuiEventFilter, SuiEventFilter] }\n\t| { Or: [SuiEventFilter, SuiEventFilter] };\n\nexport const PaginatedEvents = object({\n\tdata: array(SuiEvent),\n\tnextCursor: nullable(EventId),\n\thasNextPage: boolean(),\n});\nexport type PaginatedEvents = Infer<typeof PaginatedEvents>;\n\n/* ------------------------------- EventData ------------------------------ */\n\nexport function getEventSender(event: SuiEvent): SuiAddress {\n\treturn event.sender;\n}\n\nexport function getEventPackage(event: SuiEvent): ObjectId {\n\treturn event.packageId;\n}\n"],"mappings":"AAIA,SAASA,MAAA,EAAQC,MAAA,EAAQC,KAAA,EAAOC,MAAA,EAAQC,GAAA,EAAKC,QAAA,EAAUC,OAAA,EAASC,QAAA,QAAgB;AAEhF,SAASC,QAAA,EAAUC,UAAA,EAAYC,iBAAA,EAAmBC,cAAA,QAAsB;AAEjE,MAAMC,OAAA,GAAUZ,MAAA,CAAO;EAC7Ba,QAAA,EAAUH,iBAAA;EACVI,QAAA,EAAUH;AACX,CAAC;AAIM,MAAMI,QAAA,GAAWf,MAAA,CAAO;EAC9BgB,EAAA,EAAIJ,OAAA;EAAA;EAEJK,SAAA,EAAWT,QAAA;EAAA;EAEXU,iBAAA,EAAmBjB,MAAA,CAAO;EAAA;EAE1BkB,MAAA,EAAQV,UAAA;EAAA;EAERW,IAAA,EAAMnB,MAAA,CAAO;EAAA;EAEboB,UAAA,EAAYhB,QAAA,CAASF,MAAA,CAAOF,MAAA,CAAO,GAAGG,GAAA,CAAI,CAAC,CAAC;EAAA;EAE5CkB,GAAA,EAAKjB,QAAA,CAASJ,MAAA,CAAO,CAAC;EACtBsB,WAAA,EAAalB,QAAA,CAASJ,MAAA,CAAO,CAAC;AAC/B,CAAC;AAuCM,MAAMuB,eAAA,GAAkBxB,MAAA,CAAO;EACrCyB,IAAA,EAAMvB,KAAA,CAAMa,QAAQ;EACpBW,UAAA,EAAYnB,QAAA,CAASK,OAAO;EAC5Be,WAAA,EAAarB,OAAA,CAAQ;AACtB,CAAC;AAKM,SAASsB,eAAeC,KAAA,EAA6B;EAC3D,OAAOA,KAAA,CAAMV,MAAA;AACd;AAEO,SAASW,gBAAgBD,KAAA,EAA2B;EAC1D,OAAOA,KAAA,CAAMZ,SAAA;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}