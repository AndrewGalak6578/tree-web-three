{"ast":null,"code":"import { fromB64, toB64 } from \"@mysten/bcs\";\nimport { blake2b } from \"@noble/hashes/blake2b\";\nimport { bytesToHex } from \"@noble/hashes/utils\";\nimport { normalizeSuiAddress, SUI_ADDRESS_LENGTH } from \"../../types/index.js\";\nimport { bytesEqual } from \"../../cryptography/publickey.js\";\nimport { SIGNATURE_SCHEME_TO_FLAG } from \"../../cryptography/signature.js\";\nconst SECP256R1_PUBLIC_KEY_SIZE = 33;\nclass Secp256r1PublicKey {\n  /**\n   * Create a new Secp256r1PublicKey object\n   * @param value secp256r1 public key as buffer or base-64 encoded string\n   */\n  constructor(value) {\n    if (typeof value === \"string\") {\n      this.data = fromB64(value);\n    } else if (value instanceof Uint8Array) {\n      this.data = value;\n    } else {\n      this.data = Uint8Array.from(value);\n    }\n    if (this.data.length !== SECP256R1_PUBLIC_KEY_SIZE) {\n      throw new Error(`Invalid public key input. Expected ${SECP256R1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`);\n    }\n  }\n  /**\n   * Checks if two Secp256r1 public keys are equal\n   */\n  equals(publicKey) {\n    return bytesEqual(this.toBytes(), publicKey.toBytes());\n  }\n  /**\n   * Return the base-64 representation of the Secp256r1 public key\n   */\n  toBase64() {\n    return toB64(this.toBytes());\n  }\n  /**\n   * Return the byte array representation of the Secp256r1 public key\n   */\n  toBytes() {\n    return this.data;\n  }\n  /**\n   * Return the base-64 representation of the Secp256r1 public key\n   */\n  toString() {\n    return this.toBase64();\n  }\n  /**\n   * Return the Sui address associated with this Secp256r1 public key\n   */\n  toSuiAddress() {\n    let tmp = new Uint8Array(SECP256R1_PUBLIC_KEY_SIZE + 1);\n    tmp.set([SIGNATURE_SCHEME_TO_FLAG[\"Secp256r1\"]]);\n    tmp.set(this.toBytes(), 1);\n    return normalizeSuiAddress(bytesToHex(blake2b(tmp, {\n      dkLen: 32\n    })).slice(0, SUI_ADDRESS_LENGTH * 2));\n  }\n  /**\n   * Return the Sui address associated with this Secp256r1 public key\n   */\n  flag() {\n    return SIGNATURE_SCHEME_TO_FLAG[\"Secp256r1\"];\n  }\n}\nSecp256r1PublicKey.SIZE = SECP256R1_PUBLIC_KEY_SIZE;\nexport { Secp256r1PublicKey };","map":{"version":3,"names":["fromB64","toB64","blake2b","bytesToHex","normalizeSuiAddress","SUI_ADDRESS_LENGTH","bytesEqual","SIGNATURE_SCHEME_TO_FLAG","SECP256R1_PUBLIC_KEY_SIZE","Secp256r1PublicKey","constructor","value","data","Uint8Array","from","length","Error","equals","publicKey","toBytes","toBase64","toString","toSuiAddress","tmp","set","dkLen","slice","flag","SIZE"],"sources":["/Users/admin/Downloads/tree-web-three1/tree-web-three-react/node_modules/@mysten/sui.js/src/keypairs/secp256r1/publickey.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64, toB64 } from '@mysten/bcs';\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { bytesToHex } from '@noble/hashes/utils';\nimport { normalizeSuiAddress, SUI_ADDRESS_LENGTH } from '../../types/index.js';\nimport type { PublicKey, PublicKeyInitData } from '../../cryptography/publickey.js';\nimport { bytesEqual } from '../../cryptography/publickey.js';\nimport { SIGNATURE_SCHEME_TO_FLAG } from '../../cryptography/signature.js';\n\nconst SECP256R1_PUBLIC_KEY_SIZE = 33;\n\n/**\n * A Secp256r1 public key\n */\nexport class Secp256r1PublicKey implements PublicKey {\n\tstatic SIZE = SECP256R1_PUBLIC_KEY_SIZE;\n\tprivate data: Uint8Array;\n\n\t/**\n\t * Create a new Secp256r1PublicKey object\n\t * @param value secp256r1 public key as buffer or base-64 encoded string\n\t */\n\tconstructor(value: PublicKeyInitData) {\n\t\tif (typeof value === 'string') {\n\t\t\tthis.data = fromB64(value);\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\tthis.data = value;\n\t\t} else {\n\t\t\tthis.data = Uint8Array.from(value);\n\t\t}\n\n\t\tif (this.data.length !== SECP256R1_PUBLIC_KEY_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid public key input. Expected ${SECP256R1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if two Secp256r1 public keys are equal\n\t */\n\tequals(publicKey: Secp256r1PublicKey): boolean {\n\t\treturn bytesEqual(this.toBytes(), publicKey.toBytes());\n\t}\n\n\t/**\n\t * Return the base-64 representation of the Secp256r1 public key\n\t */\n\ttoBase64(): string {\n\t\treturn toB64(this.toBytes());\n\t}\n\n\t/**\n\t * Return the byte array representation of the Secp256r1 public key\n\t */\n\ttoBytes(): Uint8Array {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Return the base-64 representation of the Secp256r1 public key\n\t */\n\ttoString(): string {\n\t\treturn this.toBase64();\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Secp256r1 public key\n\t */\n\ttoSuiAddress(): string {\n\t\tlet tmp = new Uint8Array(SECP256R1_PUBLIC_KEY_SIZE + 1);\n\t\ttmp.set([SIGNATURE_SCHEME_TO_FLAG['Secp256r1']]);\n\t\ttmp.set(this.toBytes(), 1);\n\t\t// Each hex char represents half a byte, hence hex address doubles the length\n\t\treturn normalizeSuiAddress(\n\t\t\tbytesToHex(blake2b(tmp, { dkLen: 32 })).slice(0, SUI_ADDRESS_LENGTH * 2),\n\t\t);\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Secp256r1 public key\n\t */\n\tflag(): number {\n\t\treturn SIGNATURE_SCHEME_TO_FLAG['Secp256r1'];\n\t}\n}\n"],"mappings":"AAGA,SAASA,OAAA,EAASC,KAAA,QAAa;AAC/B,SAASC,OAAA,QAAe;AACxB,SAASC,UAAA,QAAkB;AAC3B,SAASC,mBAAA,EAAqBC,kBAAA,QAA0B;AAExD,SAASC,UAAA,QAAkB;AAC3B,SAASC,wBAAA,QAAgC;AAEzC,MAAMC,yBAAA,GAA4B;AAK3B,MAAMC,kBAAA,CAAwC;EAAA;AAAA;AAAA;AAAA;EAQpDC,YAAYC,KAAA,EAA0B;IACrC,IAAI,OAAOA,KAAA,KAAU,UAAU;MAC9B,KAAKC,IAAA,GAAOZ,OAAA,CAAQW,KAAK;IAC1B,WAAWA,KAAA,YAAiBE,UAAA,EAAY;MACvC,KAAKD,IAAA,GAAOD,KAAA;IACb,OAAO;MACN,KAAKC,IAAA,GAAOC,UAAA,CAAWC,IAAA,CAAKH,KAAK;IAClC;IAEA,IAAI,KAAKC,IAAA,CAAKG,MAAA,KAAWP,yBAAA,EAA2B;MACnD,MAAM,IAAIQ,KAAA,CACT,sCAAsCR,yBAAA,eAAwC,KAAKI,IAAA,CAAKG,MAAA,EACzF;IACD;EACD;EAAA;AAAA;AAAA;EAKAE,OAAOC,SAAA,EAAwC;IAC9C,OAAOZ,UAAA,CAAW,KAAKa,OAAA,CAAQ,GAAGD,SAAA,CAAUC,OAAA,CAAQ,CAAC;EACtD;EAAA;AAAA;AAAA;EAKAC,SAAA,EAAmB;IAClB,OAAOnB,KAAA,CAAM,KAAKkB,OAAA,CAAQ,CAAC;EAC5B;EAAA;AAAA;AAAA;EAKAA,QAAA,EAAsB;IACrB,OAAO,KAAKP,IAAA;EACb;EAAA;AAAA;AAAA;EAKAS,SAAA,EAAmB;IAClB,OAAO,KAAKD,QAAA,CAAS;EACtB;EAAA;AAAA;AAAA;EAKAE,aAAA,EAAuB;IACtB,IAAIC,GAAA,GAAM,IAAIV,UAAA,CAAWL,yBAAA,GAA4B,CAAC;IACtDe,GAAA,CAAIC,GAAA,CAAI,CAACjB,wBAAA,CAAyB,WAAW,CAAC,CAAC;IAC/CgB,GAAA,CAAIC,GAAA,CAAI,KAAKL,OAAA,CAAQ,GAAG,CAAC;IAEzB,OAAOf,mBAAA,CACND,UAAA,CAAWD,OAAA,CAAQqB,GAAA,EAAK;MAAEE,KAAA,EAAO;IAAG,CAAC,CAAC,EAAEC,KAAA,CAAM,GAAGrB,kBAAA,GAAqB,CAAC,CACxE;EACD;EAAA;AAAA;AAAA;EAKAsB,KAAA,EAAe;IACd,OAAOpB,wBAAA,CAAyB,WAAW;EAC5C;AACD;AAvEaE,kBAAA,CACLmB,IAAA,GAAOpB,yBAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}