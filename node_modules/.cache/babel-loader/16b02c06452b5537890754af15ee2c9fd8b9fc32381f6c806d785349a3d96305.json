{"ast":null,"code":"import { blake2b } from \"@noble/hashes/blake2b\";\nimport { fromB64, toB64 } from \"@mysten/bcs\";\nimport { bytesEqual } from \"../../cryptography/publickey.js\";\nimport { SIGNATURE_SCHEME_TO_FLAG } from \"../../cryptography/signature.js\";\nimport { normalizeSuiAddress, SUI_ADDRESS_LENGTH } from \"../../types/index.js\";\nimport { bytesToHex } from \"@noble/hashes/utils\";\nconst PUBLIC_KEY_SIZE = 32;\nclass Ed25519PublicKey {\n  /**\n   * Create a new Ed25519PublicKey object\n   * @param value ed25519 public key as buffer or base-64 encoded string\n   */\n  constructor(value) {\n    if (typeof value === \"string\") {\n      this.data = fromB64(value);\n    } else if (value instanceof Uint8Array) {\n      this.data = value;\n    } else {\n      this.data = Uint8Array.from(value);\n    }\n    if (this.data.length !== PUBLIC_KEY_SIZE) {\n      throw new Error(`Invalid public key input. Expected ${PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`);\n    }\n  }\n  /**\n   * Checks if two Ed25519 public keys are equal\n   */\n  equals(publicKey) {\n    return bytesEqual(this.toBytes(), publicKey.toBytes());\n  }\n  /**\n   * Return the base-64 representation of the Ed25519 public key\n   */\n  toBase64() {\n    return toB64(this.toBytes());\n  }\n  /**\n   * Return the byte array representation of the Ed25519 public key\n   */\n  toBytes() {\n    return this.data;\n  }\n  /**\n   * Return the base-64 representation of the Ed25519 public key\n   */\n  toString() {\n    return this.toBase64();\n  }\n  /**\n   * Return the Sui address associated with this Ed25519 public key\n   */\n  toSuiAddress() {\n    let tmp = new Uint8Array(PUBLIC_KEY_SIZE + 1);\n    tmp.set([SIGNATURE_SCHEME_TO_FLAG[\"ED25519\"]]);\n    tmp.set(this.toBytes(), 1);\n    return normalizeSuiAddress(bytesToHex(blake2b(tmp, {\n      dkLen: 32\n    })).slice(0, SUI_ADDRESS_LENGTH * 2));\n  }\n  /**\n   * Return the Sui address associated with this Ed25519 public key\n   */\n  flag() {\n    return SIGNATURE_SCHEME_TO_FLAG[\"ED25519\"];\n  }\n}\nEd25519PublicKey.SIZE = PUBLIC_KEY_SIZE;\nexport { Ed25519PublicKey };","map":{"version":3,"names":["blake2b","fromB64","toB64","bytesEqual","SIGNATURE_SCHEME_TO_FLAG","normalizeSuiAddress","SUI_ADDRESS_LENGTH","bytesToHex","PUBLIC_KEY_SIZE","Ed25519PublicKey","constructor","value","data","Uint8Array","from","length","Error","equals","publicKey","toBytes","toBase64","toString","toSuiAddress","tmp","set","dkLen","slice","flag","SIZE"],"sources":["/Users/admin/Downloads/tree-web-three1/tree-web-three-react/node_modules/@mysten/sui.js/src/keypairs/ed25519/publickey.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { fromB64, toB64 } from '@mysten/bcs';\nimport type { PublicKeyInitData } from '../../cryptography/publickey.js';\nimport { bytesEqual } from '../../cryptography/publickey.js';\nimport { SIGNATURE_SCHEME_TO_FLAG } from '../../cryptography/signature.js';\nimport { normalizeSuiAddress, SUI_ADDRESS_LENGTH } from '../../types/index.js';\nimport { bytesToHex } from '@noble/hashes/utils';\n\nconst PUBLIC_KEY_SIZE = 32;\n\n/**\n * An Ed25519 public key\n */\nexport class Ed25519PublicKey {\n\tstatic SIZE = PUBLIC_KEY_SIZE;\n\tprivate data: Uint8Array;\n\n\t/**\n\t * Create a new Ed25519PublicKey object\n\t * @param value ed25519 public key as buffer or base-64 encoded string\n\t */\n\tconstructor(value: PublicKeyInitData) {\n\t\tif (typeof value === 'string') {\n\t\t\tthis.data = fromB64(value);\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\tthis.data = value;\n\t\t} else {\n\t\t\tthis.data = Uint8Array.from(value);\n\t\t}\n\n\t\tif (this.data.length !== PUBLIC_KEY_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid public key input. Expected ${PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if two Ed25519 public keys are equal\n\t */\n\tequals(publicKey: Ed25519PublicKey): boolean {\n\t\treturn bytesEqual(this.toBytes(), publicKey.toBytes());\n\t}\n\n\t/**\n\t * Return the base-64 representation of the Ed25519 public key\n\t */\n\ttoBase64(): string {\n\t\treturn toB64(this.toBytes());\n\t}\n\n\t/**\n\t * Return the byte array representation of the Ed25519 public key\n\t */\n\ttoBytes(): Uint8Array {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Return the base-64 representation of the Ed25519 public key\n\t */\n\ttoString(): string {\n\t\treturn this.toBase64();\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Ed25519 public key\n\t */\n\ttoSuiAddress(): string {\n\t\tlet tmp = new Uint8Array(PUBLIC_KEY_SIZE + 1);\n\t\ttmp.set([SIGNATURE_SCHEME_TO_FLAG['ED25519']]);\n\t\ttmp.set(this.toBytes(), 1);\n\t\t// Each hex char represents half a byte, hence hex address doubles the length\n\t\treturn normalizeSuiAddress(\n\t\t\tbytesToHex(blake2b(tmp, { dkLen: 32 })).slice(0, SUI_ADDRESS_LENGTH * 2),\n\t\t);\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Ed25519 public key\n\t */\n\tflag(): number {\n\t\treturn SIGNATURE_SCHEME_TO_FLAG['ED25519'];\n\t}\n}\n"],"mappings":"AAGA,SAASA,OAAA,QAAe;AACxB,SAASC,OAAA,EAASC,KAAA,QAAa;AAE/B,SAASC,UAAA,QAAkB;AAC3B,SAASC,wBAAA,QAAgC;AACzC,SAASC,mBAAA,EAAqBC,kBAAA,QAA0B;AACxD,SAASC,UAAA,QAAkB;AAE3B,MAAMC,eAAA,GAAkB;AAKjB,MAAMC,gBAAA,CAAiB;EAAA;AAAA;AAAA;AAAA;EAQ7BC,YAAYC,KAAA,EAA0B;IACrC,IAAI,OAAOA,KAAA,KAAU,UAAU;MAC9B,KAAKC,IAAA,GAAOX,OAAA,CAAQU,KAAK;IAC1B,WAAWA,KAAA,YAAiBE,UAAA,EAAY;MACvC,KAAKD,IAAA,GAAOD,KAAA;IACb,OAAO;MACN,KAAKC,IAAA,GAAOC,UAAA,CAAWC,IAAA,CAAKH,KAAK;IAClC;IAEA,IAAI,KAAKC,IAAA,CAAKG,MAAA,KAAWP,eAAA,EAAiB;MACzC,MAAM,IAAIQ,KAAA,CACT,sCAAsCR,eAAA,eAA8B,KAAKI,IAAA,CAAKG,MAAA,EAC/E;IACD;EACD;EAAA;AAAA;AAAA;EAKAE,OAAOC,SAAA,EAAsC;IAC5C,OAAOf,UAAA,CAAW,KAAKgB,OAAA,CAAQ,GAAGD,SAAA,CAAUC,OAAA,CAAQ,CAAC;EACtD;EAAA;AAAA;AAAA;EAKAC,SAAA,EAAmB;IAClB,OAAOlB,KAAA,CAAM,KAAKiB,OAAA,CAAQ,CAAC;EAC5B;EAAA;AAAA;AAAA;EAKAA,QAAA,EAAsB;IACrB,OAAO,KAAKP,IAAA;EACb;EAAA;AAAA;AAAA;EAKAS,SAAA,EAAmB;IAClB,OAAO,KAAKD,QAAA,CAAS;EACtB;EAAA;AAAA;AAAA;EAKAE,aAAA,EAAuB;IACtB,IAAIC,GAAA,GAAM,IAAIV,UAAA,CAAWL,eAAA,GAAkB,CAAC;IAC5Ce,GAAA,CAAIC,GAAA,CAAI,CAACpB,wBAAA,CAAyB,SAAS,CAAC,CAAC;IAC7CmB,GAAA,CAAIC,GAAA,CAAI,KAAKL,OAAA,CAAQ,GAAG,CAAC;IAEzB,OAAOd,mBAAA,CACNE,UAAA,CAAWP,OAAA,CAAQuB,GAAA,EAAK;MAAEE,KAAA,EAAO;IAAG,CAAC,CAAC,EAAEC,KAAA,CAAM,GAAGpB,kBAAA,GAAqB,CAAC,CACxE;EACD;EAAA;AAAA;AAAA;EAKAqB,KAAA,EAAe;IACd,OAAOvB,wBAAA,CAAyB,SAAS;EAC1C;AACD;AAvEaK,gBAAA,CACLmB,IAAA,GAAOpB,eAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}