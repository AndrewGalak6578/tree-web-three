{"ast":null,"code":"import { BCS, getSuiMoveConfig } from \"@mysten/bcs\";\nfunction isPureArg(arg) {\n  return arg.Pure !== void 0;\n}\nconst VECTOR = \"vector\";\nconst TransactionDataV1 = {\n  kind: \"TransactionKind\",\n  sender: BCS.ADDRESS,\n  gasData: \"GasData\",\n  expiration: \"TransactionExpiration\"\n};\nconst BCS_SPEC = {\n  enums: {\n    \"Option<T>\": {\n      None: null,\n      Some: \"T\"\n    },\n    ObjectArg: {\n      ImmOrOwned: \"SuiObjectRef\",\n      Shared: \"SharedObjectRef\"\n    },\n    CallArg: {\n      Pure: [VECTOR, BCS.U8],\n      Object: \"ObjectArg\",\n      ObjVec: [VECTOR, \"ObjectArg\"]\n    },\n    TypeTag: {\n      bool: null,\n      u8: null,\n      u64: null,\n      u128: null,\n      address: null,\n      signer: null,\n      vector: \"TypeTag\",\n      struct: \"StructTag\",\n      u16: null,\n      u32: null,\n      u256: null\n    },\n    TransactionKind: {\n      // can not be called from sui.js; dummy placement\n      // to set the enum counter right for ProgrammableTransact\n      ProgrammableTransaction: \"ProgrammableTransaction\",\n      ChangeEpoch: null,\n      Genesis: null,\n      ConsensusCommitPrologue: null\n    },\n    TransactionExpiration: {\n      None: null,\n      Epoch: \"unsafe_u64\"\n    },\n    TransactionData: {\n      V1: \"TransactionDataV1\"\n    }\n  },\n  structs: {\n    SuiObjectRef: {\n      objectId: BCS.ADDRESS,\n      version: BCS.U64,\n      digest: \"ObjectDigest\"\n    },\n    SharedObjectRef: {\n      objectId: BCS.ADDRESS,\n      initialSharedVersion: BCS.U64,\n      mutable: BCS.BOOL\n    },\n    StructTag: {\n      address: BCS.ADDRESS,\n      module: BCS.STRING,\n      name: BCS.STRING,\n      typeParams: [VECTOR, \"TypeTag\"]\n    },\n    GasData: {\n      payment: [VECTOR, \"SuiObjectRef\"],\n      owner: BCS.ADDRESS,\n      price: BCS.U64,\n      budget: BCS.U64\n    },\n    // Signed transaction data needed to generate transaction digest.\n    SenderSignedData: {\n      data: \"TransactionData\",\n      txSignatures: [VECTOR, [VECTOR, BCS.U8]]\n    },\n    TransactionDataV1\n  },\n  aliases: {\n    ObjectDigest: BCS.BASE58\n  }\n};\nconst bcs = new BCS({\n  ...getSuiMoveConfig(),\n  types: BCS_SPEC\n});\nbcs.registerType(\"utf8string\", (writer, str) => {\n  const bytes = Array.from(new TextEncoder().encode(str));\n  return writer.writeVec(bytes, (writer2, el) => writer2.write8(el));\n}, reader => {\n  let bytes = reader.readVec(reader2 => reader2.read8());\n  return new TextDecoder().decode(new Uint8Array(bytes));\n});\nbcs.registerType(\"unsafe_u64\", (writer, data) => writer.write64(data), reader => Number.parseInt(reader.read64(), 10));\nexport { bcs, isPureArg };","map":{"version":3,"names":["BCS","getSuiMoveConfig","isPureArg","arg","Pure","VECTOR","TransactionDataV1","kind","sender","ADDRESS","gasData","expiration","BCS_SPEC","enums","None","Some","ObjectArg","ImmOrOwned","Shared","CallArg","U8","Object","ObjVec","TypeTag","bool","u8","u64","u128","address","signer","vector","struct","u16","u32","u256","TransactionKind","ProgrammableTransaction","ChangeEpoch","Genesis","ConsensusCommitPrologue","TransactionExpiration","Epoch","TransactionData","V1","structs","SuiObjectRef","objectId","version","U64","digest","SharedObjectRef","initialSharedVersion","mutable","BOOL","StructTag","module","STRING","name","typeParams","GasData","payment","owner","price","budget","SenderSignedData","data","txSignatures","aliases","ObjectDigest","BASE58","bcs","types","registerType","writer","str","bytes","Array","from","TextEncoder","encode","writeVec","writer2","el","write8","reader","readVec","reader2","read8","TextDecoder","decode","Uint8Array","write64","Number","parseInt","read64"],"sources":["/Users/admin/Downloads/tree-web-three1/tree-web-three-react/node_modules/@mysten/sui.js/src/types/sui-bcs.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { EnumTypeDefinition, StructTypeDefinition } from '@mysten/bcs';\nimport { BCS, getSuiMoveConfig } from '@mysten/bcs';\nimport type { SuiObjectRef } from './objects.js';\n\n/**\n * A reference to a shared object.\n */\nexport type SharedObjectRef = {\n\t/** Hex code as string representing the object id */\n\tobjectId: string;\n\n\t/** The version the object was shared at */\n\tinitialSharedVersion: number | string;\n\n\t/** Whether reference is mutable */\n\tmutable: boolean;\n};\n\n/**\n * An object argument.\n */\nexport type ObjectArg = { ImmOrOwned: SuiObjectRef } | { Shared: SharedObjectRef };\n\n/**\n * A pure argument.\n */\nexport type PureArg = { Pure: ArrayLike<number> };\n\nexport function isPureArg(arg: any): arg is PureArg {\n\treturn (arg as PureArg).Pure !== undefined;\n}\n\n/**\n * An argument for the transaction. It is a 'meant' enum which expects to have\n * one of the optional properties. If not, the BCS error will be thrown while\n * attempting to form a transaction.\n *\n * Example:\n * ```js\n * let arg1: CallArg = { Object: { Shared: {\n *   objectId: '5460cf92b5e3e7067aaace60d88324095fd22944',\n *   initialSharedVersion: 1,\n *   mutable: true,\n * } } };\n * let arg2: CallArg = { Pure: bcs.ser(BCS.STRING, 100000).toBytes() };\n * let arg3: CallArg = { Object: { ImmOrOwned: {\n *   objectId: '4047d2e25211d87922b6650233bd0503a6734279',\n *   version: 1,\n *   digest: 'bCiANCht4O9MEUhuYjdRCqRPZjr2rJ8MfqNiwyhmRgA='\n * } } };\n * ```\n *\n * For `Pure` arguments BCS is required. You must encode the values with BCS according\n * to the type required by the called function. Pure accepts only serialized values\n */\nexport type CallArg = PureArg | { Object: ObjectArg };\n\n/**\n * Kind of a TypeTag which is represented by a Move type identifier.\n */\nexport type StructTag = {\n\taddress: string;\n\tmodule: string;\n\tname: string;\n\ttypeParams: TypeTag[];\n};\n\n/**\n * Sui TypeTag object. A decoupled `0x...::module::Type<???>` parameter.\n */\nexport type TypeTag =\n\t| { bool: null }\n\t| { u8: null }\n\t| { u64: null }\n\t| { u128: null }\n\t| { address: null }\n\t| { signer: null }\n\t| { vector: TypeTag }\n\t| { struct: StructTag }\n\t| { u16: null }\n\t| { u32: null }\n\t| { u256: null };\n\n// ========== TransactionData ===========\n\n/**\n * The GasData to be used in the transaction.\n */\nexport type GasData = {\n\tpayment: SuiObjectRef[];\n\towner: string; // Gas Object's owner\n\tprice: number;\n\tbudget: number;\n};\n\n/**\n * TransactionExpiration\n *\n * Indications the expiration time for a transaction.\n */\nexport type TransactionExpiration = { None: null } | { Epoch: number };\n\n// Move name of the Vector type.\nconst VECTOR = 'vector';\n\n// Imported to explicitly tell typescript that types match\ntype TypeSchema = {\n\tstructs?: { [key: string]: StructTypeDefinition };\n\tenums?: { [key: string]: EnumTypeDefinition };\n\taliases?: { [key: string]: string };\n};\n\nconst TransactionDataV1 = {\n\tkind: 'TransactionKind',\n\tsender: BCS.ADDRESS,\n\tgasData: 'GasData',\n\texpiration: 'TransactionExpiration',\n};\n\nconst BCS_SPEC: TypeSchema = {\n\tenums: {\n\t\t'Option<T>': {\n\t\t\tNone: null,\n\t\t\tSome: 'T',\n\t\t},\n\t\tObjectArg: {\n\t\t\tImmOrOwned: 'SuiObjectRef',\n\t\t\tShared: 'SharedObjectRef',\n\t\t},\n\t\tCallArg: {\n\t\t\tPure: [VECTOR, BCS.U8],\n\t\t\tObject: 'ObjectArg',\n\t\t\tObjVec: [VECTOR, 'ObjectArg'],\n\t\t},\n\t\tTypeTag: {\n\t\t\tbool: null,\n\t\t\tu8: null,\n\t\t\tu64: null,\n\t\t\tu128: null,\n\t\t\taddress: null,\n\t\t\tsigner: null,\n\t\t\tvector: 'TypeTag',\n\t\t\tstruct: 'StructTag',\n\t\t\tu16: null,\n\t\t\tu32: null,\n\t\t\tu256: null,\n\t\t},\n\t\tTransactionKind: {\n\t\t\t// can not be called from sui.js; dummy placement\n\t\t\t// to set the enum counter right for ProgrammableTransact\n\t\t\tProgrammableTransaction: 'ProgrammableTransaction',\n\t\t\tChangeEpoch: null,\n\t\t\tGenesis: null,\n\t\t\tConsensusCommitPrologue: null,\n\t\t},\n\t\tTransactionExpiration: {\n\t\t\tNone: null,\n\t\t\tEpoch: 'unsafe_u64',\n\t\t},\n\t\tTransactionData: {\n\t\t\tV1: 'TransactionDataV1',\n\t\t},\n\t},\n\tstructs: {\n\t\tSuiObjectRef: {\n\t\t\tobjectId: BCS.ADDRESS,\n\t\t\tversion: BCS.U64,\n\t\t\tdigest: 'ObjectDigest',\n\t\t},\n\t\tSharedObjectRef: {\n\t\t\tobjectId: BCS.ADDRESS,\n\t\t\tinitialSharedVersion: BCS.U64,\n\t\t\tmutable: BCS.BOOL,\n\t\t},\n\t\tStructTag: {\n\t\t\taddress: BCS.ADDRESS,\n\t\t\tmodule: BCS.STRING,\n\t\t\tname: BCS.STRING,\n\t\t\ttypeParams: [VECTOR, 'TypeTag'],\n\t\t},\n\t\tGasData: {\n\t\t\tpayment: [VECTOR, 'SuiObjectRef'],\n\t\t\towner: BCS.ADDRESS,\n\t\t\tprice: BCS.U64,\n\t\t\tbudget: BCS.U64,\n\t\t},\n\t\t// Signed transaction data needed to generate transaction digest.\n\t\tSenderSignedData: {\n\t\t\tdata: 'TransactionData',\n\t\t\ttxSignatures: [VECTOR, [VECTOR, BCS.U8]],\n\t\t},\n\t\tTransactionDataV1,\n\t},\n\taliases: {\n\t\tObjectDigest: BCS.BASE58,\n\t},\n};\n\nconst bcs = new BCS({ ...getSuiMoveConfig(), types: BCS_SPEC });\n\nbcs.registerType(\n\t'utf8string',\n\t(writer, str) => {\n\t\tconst bytes = Array.from(new TextEncoder().encode(str));\n\t\treturn writer.writeVec(bytes, (writer, el) => writer.write8(el));\n\t},\n\t(reader) => {\n\t\tlet bytes = reader.readVec((reader) => reader.read8());\n\t\treturn new TextDecoder().decode(new Uint8Array(bytes));\n\t},\n);\n\nbcs.registerType(\n\t'unsafe_u64',\n\t(writer, data) => writer.write64(data),\n\t(reader) => Number.parseInt(reader.read64(), 10),\n);\n\nexport { bcs };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}