{"ast":null,"code":"import { array, boolean, integer, object, string, union } from \"superstruct\";\nimport { normalizeSuiAddress, SuiObjectRef } from \"../types/index.js\";\nimport { builder } from \"./bcs.js\";\nconst ObjectArg = union([object({\n  ImmOrOwned: SuiObjectRef\n}), object({\n  Shared: object({\n    objectId: string(),\n    initialSharedVersion: union([integer(), string()]),\n    mutable: boolean()\n  })\n})]);\nconst PureCallArg = object({\n  Pure: array(integer())\n});\nconst ObjectCallArg = object({\n  Object: ObjectArg\n});\nconst BuilderCallArg = union([PureCallArg, ObjectCallArg]);\nconst Inputs = {\n  Pure(data, type) {\n    return {\n      Pure: Array.from(data instanceof Uint8Array ? data :\n      // NOTE: We explicitly set this to be growable to infinity, because we have maxSize validation at the builder-level:\n      builder.ser(type, data, {\n        maxSize: Infinity\n      }).toBytes())\n    };\n  },\n  ObjectRef(_ref) {\n    let {\n      objectId,\n      digest,\n      version\n    } = _ref;\n    return {\n      Object: {\n        ImmOrOwned: {\n          digest,\n          version,\n          objectId: normalizeSuiAddress(objectId)\n        }\n      }\n    };\n  },\n  SharedObjectRef(_ref2) {\n    let {\n      objectId,\n      mutable,\n      initialSharedVersion\n    } = _ref2;\n    return {\n      Object: {\n        Shared: {\n          mutable,\n          initialSharedVersion,\n          objectId: normalizeSuiAddress(objectId)\n        }\n      }\n    };\n  }\n};\nfunction getIdFromCallArg(arg) {\n  if (typeof arg === \"string\") {\n    return normalizeSuiAddress(arg);\n  }\n  if (\"ImmOrOwned\" in arg.Object) {\n    return normalizeSuiAddress(arg.Object.ImmOrOwned.objectId);\n  }\n  return normalizeSuiAddress(arg.Object.Shared.objectId);\n}\nfunction getSharedObjectInput(arg) {\n  return typeof arg === \"object\" && \"Object\" in arg && \"Shared\" in arg.Object ? arg.Object.Shared : void 0;\n}\nfunction isSharedObjectInput(arg) {\n  return !!getSharedObjectInput(arg);\n}\nfunction isMutableSharedObjectInput(arg) {\n  return getSharedObjectInput(arg)?.mutable ?? false;\n}\nexport { BuilderCallArg, Inputs, ObjectCallArg, PureCallArg, getIdFromCallArg, getSharedObjectInput, isMutableSharedObjectInput, isSharedObjectInput };","map":{"version":3,"names":["array","boolean","integer","object","string","union","normalizeSuiAddress","SuiObjectRef","builder","ObjectArg","ImmOrOwned","Shared","objectId","initialSharedVersion","mutable","PureCallArg","Pure","ObjectCallArg","Object","BuilderCallArg","Inputs","data","type","Array","from","Uint8Array","ser","maxSize","Infinity","toBytes","ObjectRef","_ref","digest","version","SharedObjectRef","_ref2","getIdFromCallArg","arg","getSharedObjectInput","isSharedObjectInput","isMutableSharedObjectInput"],"sources":["/Users/admin/Downloads/tree-web-three1/tree-web-three-react/node_modules/@mysten/sui.js/src/builder/Inputs.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport { array, boolean, integer, object, string, union } from 'superstruct';\nimport type { ObjectId, SharedObjectRef } from '../types/index.js';\nimport { normalizeSuiAddress, SuiObjectRef } from '../types/index.js';\nimport { builder } from './bcs.js';\n\nconst ObjectArg = union([\n\tobject({ ImmOrOwned: SuiObjectRef }),\n\tobject({\n\t\tShared: object({\n\t\t\tobjectId: string(),\n\t\t\tinitialSharedVersion: union([integer(), string()]),\n\t\t\tmutable: boolean(),\n\t\t}),\n\t}),\n]);\n\nexport const PureCallArg = object({ Pure: array(integer()) });\nexport const ObjectCallArg = object({ Object: ObjectArg });\nexport type PureCallArg = Infer<typeof PureCallArg>;\nexport type ObjectCallArg = Infer<typeof ObjectCallArg>;\n\nexport const BuilderCallArg = union([PureCallArg, ObjectCallArg]);\nexport type BuilderCallArg = Infer<typeof BuilderCallArg>;\n\nexport const Inputs = {\n\tPure(data: unknown, type?: string): PureCallArg {\n\t\treturn {\n\t\t\tPure: Array.from(\n\t\t\t\tdata instanceof Uint8Array\n\t\t\t\t\t? data\n\t\t\t\t\t: // NOTE: We explicitly set this to be growable to infinity, because we have maxSize validation at the builder-level:\n\t\t\t\t\t  builder.ser(type!, data, { maxSize: Infinity }).toBytes(),\n\t\t\t),\n\t\t};\n\t},\n\tObjectRef({ objectId, digest, version }: SuiObjectRef): ObjectCallArg {\n\t\treturn {\n\t\t\tObject: {\n\t\t\t\tImmOrOwned: {\n\t\t\t\t\tdigest,\n\t\t\t\t\tversion,\n\t\t\t\t\tobjectId: normalizeSuiAddress(objectId),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n\tSharedObjectRef({ objectId, mutable, initialSharedVersion }: SharedObjectRef): ObjectCallArg {\n\t\treturn {\n\t\t\tObject: {\n\t\t\t\tShared: {\n\t\t\t\t\tmutable,\n\t\t\t\t\tinitialSharedVersion,\n\t\t\t\t\tobjectId: normalizeSuiAddress(objectId),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n};\n\nexport function getIdFromCallArg(arg: ObjectId | ObjectCallArg) {\n\tif (typeof arg === 'string') {\n\t\treturn normalizeSuiAddress(arg);\n\t}\n\tif ('ImmOrOwned' in arg.Object) {\n\t\treturn normalizeSuiAddress(arg.Object.ImmOrOwned.objectId);\n\t}\n\treturn normalizeSuiAddress(arg.Object.Shared.objectId);\n}\n\nexport function getSharedObjectInput(arg: BuilderCallArg): SharedObjectRef | undefined {\n\treturn typeof arg === 'object' && 'Object' in arg && 'Shared' in arg.Object\n\t\t? arg.Object.Shared\n\t\t: undefined;\n}\n\nexport function isSharedObjectInput(arg: BuilderCallArg): boolean {\n\treturn !!getSharedObjectInput(arg);\n}\n\nexport function isMutableSharedObjectInput(arg: BuilderCallArg): boolean {\n\treturn getSharedObjectInput(arg)?.mutable ?? false;\n}\n"],"mappings":"AAIA,SAASA,KAAA,EAAOC,OAAA,EAASC,OAAA,EAASC,MAAA,EAAQC,MAAA,EAAQC,KAAA,QAAa;AAE/D,SAASC,mBAAA,EAAqBC,YAAA,QAAoB;AAClD,SAASC,OAAA,QAAe;AAExB,MAAMC,SAAA,GAAYJ,KAAA,CAAM,CACvBF,MAAA,CAAO;EAAEO,UAAA,EAAYH;AAAa,CAAC,GACnCJ,MAAA,CAAO;EACNQ,MAAA,EAAQR,MAAA,CAAO;IACdS,QAAA,EAAUR,MAAA,CAAO;IACjBS,oBAAA,EAAsBR,KAAA,CAAM,CAACH,OAAA,CAAQ,GAAGE,MAAA,CAAO,CAAC,CAAC;IACjDU,OAAA,EAASb,OAAA,CAAQ;EAClB,CAAC;AACF,CAAC,EACD;AAEM,MAAMc,WAAA,GAAcZ,MAAA,CAAO;EAAEa,IAAA,EAAMhB,KAAA,CAAME,OAAA,CAAQ,CAAC;AAAE,CAAC;AACrD,MAAMe,aAAA,GAAgBd,MAAA,CAAO;EAAEe,MAAA,EAAQT;AAAU,CAAC;AAIlD,MAAMU,cAAA,GAAiBd,KAAA,CAAM,CAACU,WAAA,EAAaE,aAAa,CAAC;AAGzD,MAAMG,MAAA,GAAS;EACrBJ,KAAKK,IAAA,EAAeC,IAAA,EAA4B;IAC/C,OAAO;MACNN,IAAA,EAAMO,KAAA,CAAMC,IAAA,CACXH,IAAA,YAAgBI,UAAA,GACbJ,IAAA;MAAA;MAEAb,OAAA,CAAQkB,GAAA,CAAIJ,IAAA,EAAOD,IAAA,EAAM;QAAEM,OAAA,EAASC;MAAS,CAAC,EAAEC,OAAA,CAAQ,CAC5D;IACD;EACD;EACAC,UAAAC,IAAA,EAAsE;IAAA,IAA5D;MAAEnB,QAAA;MAAUoB,MAAA;MAAQC;IAAQ,IAAAF,IAAA;IACrC,OAAO;MACNb,MAAA,EAAQ;QACPR,UAAA,EAAY;UACXsB,MAAA;UACAC,OAAA;UACArB,QAAA,EAAUN,mBAAA,CAAoBM,QAAQ;QACvC;MACD;IACD;EACD;EACAsB,gBAAAC,KAAA,EAA6F;IAAA,IAA7E;MAAEvB,QAAA;MAAUE,OAAA;MAASD;IAAqB,IAAAsB,KAAA;IACzD,OAAO;MACNjB,MAAA,EAAQ;QACPP,MAAA,EAAQ;UACPG,OAAA;UACAD,oBAAA;UACAD,QAAA,EAAUN,mBAAA,CAAoBM,QAAQ;QACvC;MACD;IACD;EACD;AACD;AAEO,SAASwB,iBAAiBC,GAAA,EAA+B;EAC/D,IAAI,OAAOA,GAAA,KAAQ,UAAU;IAC5B,OAAO/B,mBAAA,CAAoB+B,GAAG;EAC/B;EACA,IAAI,gBAAgBA,GAAA,CAAInB,MAAA,EAAQ;IAC/B,OAAOZ,mBAAA,CAAoB+B,GAAA,CAAInB,MAAA,CAAOR,UAAA,CAAWE,QAAQ;EAC1D;EACA,OAAON,mBAAA,CAAoB+B,GAAA,CAAInB,MAAA,CAAOP,MAAA,CAAOC,QAAQ;AACtD;AAEO,SAAS0B,qBAAqBD,GAAA,EAAkD;EACtF,OAAO,OAAOA,GAAA,KAAQ,YAAY,YAAYA,GAAA,IAAO,YAAYA,GAAA,CAAInB,MAAA,GAClEmB,GAAA,CAAInB,MAAA,CAAOP,MAAA,GACX;AACJ;AAEO,SAAS4B,oBAAoBF,GAAA,EAA8B;EACjE,OAAO,CAAC,CAACC,oBAAA,CAAqBD,GAAG;AAClC;AAEO,SAASG,2BAA2BH,GAAA,EAA8B;EACxE,OAAOC,oBAAA,CAAqBD,GAAG,GAAGvB,OAAA,IAAW;AAC9C"},"metadata":{},"sourceType":"module","externalDependencies":[]}