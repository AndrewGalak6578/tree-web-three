{"ast":null,"code":"import { TransactionBlock } from \"../builder/index.js\";\nimport { getObjectReference, normalizeSuiObjectId, SUI_SYSTEM_ADDRESS } from \"../types/index.js\";\nconst SUI_SYSTEM_STATE_OBJECT_ID = normalizeSuiObjectId(\"0x5\");\nconst SUI_SYSTEM_MODULE_NAME = \"sui_system\";\nconst ADD_STAKE_FUN_NAME = \"request_add_stake\";\nconst ADD_STAKE_LOCKED_COIN_FUN_NAME = \"request_add_stake_with_locked_coin\";\nconst WITHDRAW_STAKE_FUN_NAME = \"request_withdraw_stake\";\nclass SuiSystemStateUtil {\n  /**\n   * Create a new transaction for staking coins ready to be signed and executed with `signer-and-provider`.\n   *\n   * @param coins the coins to be staked\n   * @param amount the amount to stake\n   * @param gasBudget omittable only for DevInspect mode\n   */\n  static async newRequestAddStakeTxn(provider, coins, amount, validatorAddress) {\n    const tx = new TransactionBlock();\n    const coin = tx.splitCoins(tx.gas, [tx.pure(amount)]);\n    tx.moveCall({\n      target: `${SUI_SYSTEM_ADDRESS}::${SUI_SYSTEM_MODULE_NAME}::${ADD_STAKE_FUN_NAME}`,\n      arguments: [tx.object(SUI_SYSTEM_STATE_OBJECT_ID), coin, tx.pure(validatorAddress)]\n    });\n    const coinObjects = await provider.multiGetObjects({\n      ids: coins,\n      options: {\n        showOwner: true\n      }\n    });\n    tx.setGasPayment(coinObjects.map(obj => getObjectReference(obj)));\n    return tx;\n  }\n  /**\n   * Create a new transaction for withdrawing coins ready to be signed and\n   * executed with `signer-and-provider`.\n   *\n   * @param stake the stake object created in the requestAddStake txn\n   * @param stakedCoinId the coins to withdraw\n   * @param gasBudget omittable only for DevInspect mode\n   */\n  static async newRequestWithdrawlStakeTxn(stake, stakedCoinId) {\n    const tx = new TransactionBlock();\n    tx.moveCall({\n      target: `${SUI_SYSTEM_ADDRESS}::${SUI_SYSTEM_MODULE_NAME}::${WITHDRAW_STAKE_FUN_NAME}`,\n      arguments: [tx.object(SUI_SYSTEM_STATE_OBJECT_ID), tx.object(stake), tx.object(stakedCoinId)]\n    });\n    return tx;\n  }\n}\nexport { ADD_STAKE_FUN_NAME, ADD_STAKE_LOCKED_COIN_FUN_NAME, SUI_SYSTEM_MODULE_NAME, SUI_SYSTEM_STATE_OBJECT_ID, SuiSystemStateUtil, WITHDRAW_STAKE_FUN_NAME };","map":{"version":3,"names":["TransactionBlock","getObjectReference","normalizeSuiObjectId","SUI_SYSTEM_ADDRESS","SUI_SYSTEM_STATE_OBJECT_ID","SUI_SYSTEM_MODULE_NAME","ADD_STAKE_FUN_NAME","ADD_STAKE_LOCKED_COIN_FUN_NAME","WITHDRAW_STAKE_FUN_NAME","SuiSystemStateUtil","newRequestAddStakeTxn","provider","coins","amount","validatorAddress","tx","coin","splitCoins","gas","pure","moveCall","target","arguments","object","coinObjects","multiGetObjects","ids","options","showOwner","setGasPayment","map","obj","newRequestWithdrawlStakeTxn","stake","stakedCoinId"],"sources":["/Users/admin/Downloads/tree-web-three1/tree-web-three-react/node_modules/@mysten/sui.js/src/framework/sui-system-state.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { TransactionBlock } from '../builder/index.js';\nimport type { JsonRpcProvider } from '../providers/json-rpc-provider.js';\nimport type { ObjectId, SuiAddress } from '../types/index.js';\nimport { getObjectReference, normalizeSuiObjectId, SUI_SYSTEM_ADDRESS } from '../types/index.js';\n\n/**\n * Address of the Sui System object.\n * Always the same in every Sui network (local, devnet, testnet).\n */\nexport const SUI_SYSTEM_STATE_OBJECT_ID: string = normalizeSuiObjectId('0x5');\n\nexport const SUI_SYSTEM_MODULE_NAME = 'sui_system';\nexport const ADD_STAKE_FUN_NAME = 'request_add_stake';\nexport const ADD_STAKE_LOCKED_COIN_FUN_NAME = 'request_add_stake_with_locked_coin';\nexport const WITHDRAW_STAKE_FUN_NAME = 'request_withdraw_stake';\n\n/**\n * Utility class for `0x5` object\n */\nexport class SuiSystemStateUtil {\n\t/**\n\t * Create a new transaction for staking coins ready to be signed and executed with `signer-and-provider`.\n\t *\n\t * @param coins the coins to be staked\n\t * @param amount the amount to stake\n\t * @param gasBudget omittable only for DevInspect mode\n\t */\n\tpublic static async newRequestAddStakeTxn(\n\t\tprovider: JsonRpcProvider,\n\t\tcoins: ObjectId[],\n\t\tamount: bigint,\n\t\tvalidatorAddress: SuiAddress,\n\t): Promise<TransactionBlock> {\n\t\t// TODO: validate coin types and handle locked coins\n\t\tconst tx = new TransactionBlock();\n\n\t\tconst coin = tx.splitCoins(tx.gas, [tx.pure(amount)]);\n\t\ttx.moveCall({\n\t\t\ttarget: `${SUI_SYSTEM_ADDRESS}::${SUI_SYSTEM_MODULE_NAME}::${ADD_STAKE_FUN_NAME}`,\n\t\t\targuments: [tx.object(SUI_SYSTEM_STATE_OBJECT_ID), coin, tx.pure(validatorAddress)],\n\t\t});\n\t\tconst coinObjects = await provider.multiGetObjects({\n\t\t\tids: coins,\n\t\t\toptions: {\n\t\t\t\tshowOwner: true,\n\t\t\t},\n\t\t});\n\t\ttx.setGasPayment(coinObjects.map((obj) => getObjectReference(obj)!));\n\t\treturn tx;\n\t}\n\n\t/**\n\t * Create a new transaction for withdrawing coins ready to be signed and\n\t * executed with `signer-and-provider`.\n\t *\n\t * @param stake the stake object created in the requestAddStake txn\n\t * @param stakedCoinId the coins to withdraw\n\t * @param gasBudget omittable only for DevInspect mode\n\t */\n\tpublic static async newRequestWithdrawlStakeTxn(\n\t\tstake: ObjectId,\n\t\tstakedCoinId: ObjectId,\n\t): Promise<TransactionBlock> {\n\t\tconst tx = new TransactionBlock();\n\t\ttx.moveCall({\n\t\t\ttarget: `${SUI_SYSTEM_ADDRESS}::${SUI_SYSTEM_MODULE_NAME}::${WITHDRAW_STAKE_FUN_NAME}`,\n\t\t\targuments: [tx.object(SUI_SYSTEM_STATE_OBJECT_ID), tx.object(stake), tx.object(stakedCoinId)],\n\t\t});\n\n\t\treturn tx;\n\t}\n}\n"],"mappings":"AAGA,SAASA,gBAAA,QAAwB;AAGjC,SAASC,kBAAA,EAAoBC,oBAAA,EAAsBC,kBAAA,QAA0B;AAMtE,MAAMC,0BAAA,GAAqCF,oBAAA,CAAqB,KAAK;AAErE,MAAMG,sBAAA,GAAyB;AAC/B,MAAMC,kBAAA,GAAqB;AAC3B,MAAMC,8BAAA,GAAiC;AACvC,MAAMC,uBAAA,GAA0B;AAKhC,MAAMC,kBAAA,CAAmB;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQ/B,aAAoBC,sBACnBC,QAAA,EACAC,KAAA,EACAC,MAAA,EACAC,gBAAA,EAC4B;IAE5B,MAAMC,EAAA,GAAK,IAAIf,gBAAA,CAAiB;IAEhC,MAAMgB,IAAA,GAAOD,EAAA,CAAGE,UAAA,CAAWF,EAAA,CAAGG,GAAA,EAAK,CAACH,EAAA,CAAGI,IAAA,CAAKN,MAAM,CAAC,CAAC;IACpDE,EAAA,CAAGK,QAAA,CAAS;MACXC,MAAA,EAAQ,GAAGlB,kBAAA,KAAuBE,sBAAA,KAA2BC,kBAAA;MAC7DgB,SAAA,EAAW,CAACP,EAAA,CAAGQ,MAAA,CAAOnB,0BAA0B,GAAGY,IAAA,EAAMD,EAAA,CAAGI,IAAA,CAAKL,gBAAgB,CAAC;IACnF,CAAC;IACD,MAAMU,WAAA,GAAc,MAAMb,QAAA,CAASc,eAAA,CAAgB;MAClDC,GAAA,EAAKd,KAAA;MACLe,OAAA,EAAS;QACRC,SAAA,EAAW;MACZ;IACD,CAAC;IACDb,EAAA,CAAGc,aAAA,CAAcL,WAAA,CAAYM,GAAA,CAAKC,GAAA,IAAQ9B,kBAAA,CAAmB8B,GAAG,CAAE,CAAC;IACnE,OAAOhB,EAAA;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,aAAoBiB,4BACnBC,KAAA,EACAC,YAAA,EAC4B;IAC5B,MAAMnB,EAAA,GAAK,IAAIf,gBAAA,CAAiB;IAChCe,EAAA,CAAGK,QAAA,CAAS;MACXC,MAAA,EAAQ,GAAGlB,kBAAA,KAAuBE,sBAAA,KAA2BG,uBAAA;MAC7Dc,SAAA,EAAW,CAACP,EAAA,CAAGQ,MAAA,CAAOnB,0BAA0B,GAAGW,EAAA,CAAGQ,MAAA,CAAOU,KAAK,GAAGlB,EAAA,CAAGQ,MAAA,CAAOW,YAAY,CAAC;IAC7F,CAAC;IAED,OAAOnB,EAAA;EACR;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}