{"ast":null,"code":"import { blake2b } from \"@noble/hashes/blake2b\";\nimport { SignerWithProvider } from \"./signer-with-provider.js\";\nimport { toSerializedSignature } from \"../cryptography/utils.js\";\nclass RawSigner extends SignerWithProvider {\n  constructor(keypair, provider) {\n    super(provider);\n    this.keypair = keypair;\n  }\n  async getAddress() {\n    return this.keypair.getPublicKey().toSuiAddress();\n  }\n  async signData(data) {\n    const pubkey = this.keypair.getPublicKey();\n    const digest = blake2b(data, {\n      dkLen: 32\n    });\n    const signature = this.keypair.signData(digest);\n    const signatureScheme = this.keypair.getKeyScheme();\n    return toSerializedSignature({\n      signatureScheme,\n      signature,\n      pubKey: pubkey\n    });\n  }\n  connect(provider) {\n    return new RawSigner(this.keypair, provider);\n  }\n}\nexport { RawSigner };","map":{"version":3,"names":["blake2b","SignerWithProvider","toSerializedSignature","RawSigner","constructor","keypair","provider","getAddress","getPublicKey","toSuiAddress","signData","data","pubkey","digest","dkLen","signature","signatureScheme","getKeyScheme","pubKey","connect"],"sources":["/Users/admin/Downloads/tree-web-three1/tree-web-three-react/node_modules/@mysten/sui.js/src/signers/raw-signer.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { blake2b } from '@noble/hashes/blake2b';\nimport type { Keypair } from '../cryptography/keypair.js';\nimport type { SerializedSignature } from '../cryptography/signature.js';\nimport type { JsonRpcProvider } from '../providers/json-rpc-provider.js';\nimport type { SuiAddress } from '../types/index.js';\nimport { SignerWithProvider } from './signer-with-provider.js';\nimport { toSerializedSignature } from '../cryptography/utils.js';\n\nexport class RawSigner extends SignerWithProvider {\n\tprivate readonly keypair: Keypair;\n\n\tconstructor(keypair: Keypair, provider: JsonRpcProvider) {\n\t\tsuper(provider);\n\t\tthis.keypair = keypair;\n\t}\n\n\tasync getAddress(): Promise<SuiAddress> {\n\t\treturn this.keypair.getPublicKey().toSuiAddress();\n\t}\n\n\tasync signData(data: Uint8Array): Promise<SerializedSignature> {\n\t\tconst pubkey = this.keypair.getPublicKey();\n\t\tconst digest = blake2b(data, { dkLen: 32 });\n\t\tconst signature = this.keypair.signData(digest);\n\t\tconst signatureScheme = this.keypair.getKeyScheme();\n\n\t\treturn toSerializedSignature({\n\t\t\tsignatureScheme,\n\t\t\tsignature,\n\t\t\tpubKey: pubkey,\n\t\t});\n\t}\n\n\tconnect(provider: JsonRpcProvider): SignerWithProvider {\n\t\treturn new RawSigner(this.keypair, provider);\n\t}\n}\n"],"mappings":"AAGA,SAASA,OAAA,QAAe;AAKxB,SAASC,kBAAA,QAA0B;AACnC,SAASC,qBAAA,QAA6B;AAE/B,MAAMC,SAAA,SAAkBF,kBAAA,CAAmB;EAGjDG,YAAYC,OAAA,EAAkBC,QAAA,EAA2B;IACxD,MAAMA,QAAQ;IACd,KAAKD,OAAA,GAAUA,OAAA;EAChB;EAEA,MAAME,WAAA,EAAkC;IACvC,OAAO,KAAKF,OAAA,CAAQG,YAAA,CAAa,EAAEC,YAAA,CAAa;EACjD;EAEA,MAAMC,SAASC,IAAA,EAAgD;IAC9D,MAAMC,MAAA,GAAS,KAAKP,OAAA,CAAQG,YAAA,CAAa;IACzC,MAAMK,MAAA,GAASb,OAAA,CAAQW,IAAA,EAAM;MAAEG,KAAA,EAAO;IAAG,CAAC;IAC1C,MAAMC,SAAA,GAAY,KAAKV,OAAA,CAAQK,QAAA,CAASG,MAAM;IAC9C,MAAMG,eAAA,GAAkB,KAAKX,OAAA,CAAQY,YAAA,CAAa;IAElD,OAAOf,qBAAA,CAAsB;MAC5Bc,eAAA;MACAD,SAAA;MACAG,MAAA,EAAQN;IACT,CAAC;EACF;EAEAO,QAAQb,QAAA,EAA+C;IACtD,OAAO,IAAIH,SAAA,CAAU,KAAKE,OAAA,EAASC,QAAQ;EAC5C;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}